{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to PurplShip Overview PurplShip is an open source library which makes shipping carrier API integration easy. PurplShip proposes an intuitive unified API, to make multi-carrier integration seamless. Integrate multiple carriers: DHL, FedEx, UPS, Canada Post and more with ease Use an intuitive, unified API across multiple carriers Use your developer credentials with negotiated rates PurplShip helps not having to reinvent the wheel and is easy to use: import purplship proxy = purplship . gateway [ 'dhl' ] . create ({ \"server_url\" : \"https://xmlpi-ea.dhl.com/XMLShippingServlet\" , \"site_id\" : \"YOUR_DHL_SITE_ID\" , \"password\" : \"YOUR_DHL_SITE_PASSWORD\" , \"account_number\" : \"YOUR_DHL_ACCOUNT_NUMBER\" }) tracking_response = purplship . rating . fetch ( tracking_numbers = [ \"8346088391\" ] ) . from_ ( proxy ) tracking = tracking_response . parse () from gds_helpers import to_dict print ( to_dict ( tracking )) ''' [ [ { \"carrier\": \"DHL\", \"events\": [ { \"code\": \"PU\", \"date\": \"2009-08-13\", \"description\": \"Shipment picked up\", \"location\": \"Hong Kong - Hong Kong \", \"signatory\": \"\", \"time\": \"23:58:00\" }, { \"code\": \"RW\", \"date\": \"2009-08-14\", \"description\": \"\", \"location\": \"Hong Kong - Hong Kong \", \"signatory\": \"21.20\", \"time\": \"02:19:50\" } ], \"shipment_date\": \"2009-08-13 23:58:00\", \"tracking_number\": \"8346088391\" } ], [] ] ''' Prerequisites PurplShip is compatible with Python 3 + Installing PurplShip can be installed with pip : Released version (specify a purplship==version if needed) pip install -f https://git.io/purplship purplship From Source : git clone https://github.com/PurplShip/purplship.git pip install --process-dependency-links -e purplship License This project is licensed under the LGPL v3 License - see the LICENSE.md file for details Contributing We happily welcome contributions, please see CONTRIBUTING.md for details.","title":"Home"},{"location":"#welcome-to-purplship","text":"","title":"Welcome to PurplShip"},{"location":"#overview","text":"PurplShip is an open source library which makes shipping carrier API integration easy. PurplShip proposes an intuitive unified API, to make multi-carrier integration seamless. Integrate multiple carriers: DHL, FedEx, UPS, Canada Post and more with ease Use an intuitive, unified API across multiple carriers Use your developer credentials with negotiated rates PurplShip helps not having to reinvent the wheel and is easy to use: import purplship proxy = purplship . gateway [ 'dhl' ] . create ({ \"server_url\" : \"https://xmlpi-ea.dhl.com/XMLShippingServlet\" , \"site_id\" : \"YOUR_DHL_SITE_ID\" , \"password\" : \"YOUR_DHL_SITE_PASSWORD\" , \"account_number\" : \"YOUR_DHL_ACCOUNT_NUMBER\" }) tracking_response = purplship . rating . fetch ( tracking_numbers = [ \"8346088391\" ] ) . from_ ( proxy ) tracking = tracking_response . parse () from gds_helpers import to_dict print ( to_dict ( tracking )) ''' [ [ { \"carrier\": \"DHL\", \"events\": [ { \"code\": \"PU\", \"date\": \"2009-08-13\", \"description\": \"Shipment picked up\", \"location\": \"Hong Kong - Hong Kong \", \"signatory\": \"\", \"time\": \"23:58:00\" }, { \"code\": \"RW\", \"date\": \"2009-08-14\", \"description\": \"\", \"location\": \"Hong Kong - Hong Kong \", \"signatory\": \"21.20\", \"time\": \"02:19:50\" } ], \"shipment_date\": \"2009-08-13 23:58:00\", \"tracking_number\": \"8346088391\" } ], [] ] '''","title":"Overview"},{"location":"#prerequisites","text":"PurplShip is compatible with Python 3 +","title":"Prerequisites"},{"location":"#installing","text":"PurplShip can be installed with pip : Released version (specify a purplship==version if needed) pip install -f https://git.io/purplship purplship From Source : git clone https://github.com/PurplShip/purplship.git pip install --process-dependency-links -e purplship","title":"Installing"},{"location":"#license","text":"This project is licensed under the LGPL v3 License - see the LICENSE.md file for details","title":"License"},{"location":"#contributing","text":"We happily welcome contributions, please see CONTRIBUTING.md for details.","title":"Contributing"},{"location":"api/","text":"","title":"API"},{"location":"faq/","text":"FAQ What is PurplShip solving? PurplShip offers an open source solution to integrate one or multiple shipping carriers API with ease. Who is PurplShip for? PurplShip is available as a library exposing tools to get the communication with shipping carriers directly from your codebase. Additionaly, the clean JSON in -> JSON out architecture makes it easy to package it as a self contain REST API. What is the benefit of using PurplShip? PurplShip uses the power of open source to offer a strong base to tackle and reduce shipping API integration challenges. Shipping carriers often have docs difficult to follow with omitted vital information, changing constantly. All these pain are relieved by the strong well-tested foundation offered by PurplShip. Is PurplShip easy to use? Yes. PurplShip hides the complexity of dealing with SOAP and XML in favour of a higher level API expressed in simple code.","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#what-is-purplship-solving","text":"PurplShip offers an open source solution to integrate one or multiple shipping carriers API with ease.","title":"What is PurplShip solving?"},{"location":"faq/#who-is-purplship-for","text":"PurplShip is available as a library exposing tools to get the communication with shipping carriers directly from your codebase. Additionaly, the clean JSON in -> JSON out architecture makes it easy to package it as a self contain REST API.","title":"Who is PurplShip for?"},{"location":"faq/#what-is-the-benefit-of-using-purplship","text":"PurplShip uses the power of open source to offer a strong base to tackle and reduce shipping API integration challenges. Shipping carriers often have docs difficult to follow with omitted vital information, changing constantly. All these pain are relieved by the strong well-tested foundation offered by PurplShip.","title":"What is the benefit of using PurplShip?"},{"location":"faq/#is-purplship-easy-to-use","text":"Yes. PurplShip hides the complexity of dealing with SOAP and XML in favour of a higher level API expressed in simple code.","title":"Is PurplShip easy to use?"},{"location":"roadmap/","text":"Roadmap Milestones Design the distinction between Freight and package Unify label format Unify date formats Unify share shipping options Documentation versioning retstructuring Carriers Integration Aramex - Rating - Tracking - Shipping - Pickup Australia Post - Shipping - Pickup Canada Post - Pickup FedEx - Pickup - Freight Purolator - Rating - Tracking - Shipping - Pickup Sendle - Shipping - Pickup UPS - Pickup - Freight USPS - Rating - Tracking - Shipping - Pickup","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"","title":"Roadmap"},{"location":"roadmap/#milestones","text":"Design the distinction between Freight and package Unify label format Unify date formats Unify share shipping options Documentation versioning retstructuring","title":"Milestones"},{"location":"roadmap/#carriers-integration","text":"","title":"Carriers Integration"},{"location":"roadmap/#aramex","text":"- Rating - Tracking - Shipping - Pickup","title":"Aramex"},{"location":"roadmap/#australia-post","text":"- Shipping - Pickup","title":"Australia Post"},{"location":"roadmap/#canada-post","text":"- Pickup","title":"Canada Post"},{"location":"roadmap/#fedex","text":"- Pickup - Freight","title":"FedEx"},{"location":"roadmap/#purolator","text":"- Rating - Tracking - Shipping - Pickup","title":"Purolator"},{"location":"roadmap/#sendle","text":"- Shipping - Pickup","title":"Sendle"},{"location":"roadmap/#ups","text":"- Pickup - Freight","title":"UPS"},{"location":"roadmap/#usps","text":"- Rating - Tracking - Shipping - Pickup","title":"USPS"},{"location":"usage/","text":"Use case E-commerce WMS, SAP, ERP... Others","title":"Use case"},{"location":"usage/#use-case","text":"","title":"Use case"},{"location":"usage/#e-commerce","text":"","title":"E-commerce"},{"location":"usage/#wms-sap-erp","text":"","title":"WMS, SAP, ERP..."},{"location":"usage/#others","text":"","title":"Others"},{"location":"advanced/default/","text":"","title":"Default"},{"location":"advanced/extra/","text":"","title":"Extra"},{"location":"advanced/freight/","text":"","title":"Freight"},{"location":"advanced/health/","text":"","title":"Healthcare"},{"location":"advanced/options/","text":"","title":"Shipping Options"},{"location":"basic/gateway/","text":"Carriers Gateways","title":"Gateway"},{"location":"basic/gateway/#carriers-gateways","text":"","title":"Carriers Gateways"},{"location":"basic/pickup/","text":"Pickup Pickup booking import purplship dhl = purplship . gateway [ 'dhl' ] . create ({ ... }) pickup_booking = purplship . pickup . book ( ** { \"date\" : \"2013-10-19\" , \"account_number\" : \"123456789\" , \"pieces\" : 2 , \"weight\" : 20 , \"weight_unit\" : \"L\" , \"ready_time\" : \"10:20:00\" , \"closing_time\" : \"09:20:00\" , \"city\" : \"Montreal\" , \"postal_code\" : \"H8Z2Z3\" , \"person_name\" : \"Subhayu\" , \"phone_number\" : \"4801313131\" , \"region_code\" : \"QC\" , \"country_code\" : \"CA\" , \"email_address\" : \"test@mail.com\" , \"instruction\" : \"behind the front desk\" , \"address_lines\" : [ \"234 rue Hubert\" ], \"extra\" : { \"RequestorContact\" : { \"PersonName\" : \"Rikhil\" , \"Phone\" : \"23162\" } } }) . with_ ( dhl ) response = pickup_booking . parse () from gds_helpers import to_dict print ( to_dict ( response )) [ { \"carrier\" : \"carrier_name\" , \"confirmation_number\" : \"3674\" , \"pickup_date\" : \"2013-10-09\" , \"ref_times\" : [ { \"name\" : \"ReadyByTime\" , \"value\" : \"10:30\" }, { \"name\" : \"CallInTime\" , \"value\" : \"08:30\" } ] }, [] ] Pickup request and update request payload { \"date\" : \"string\" , \"account_number\" : \"string\" , \"weight\" : 0 , \"weight_unit\" : \"KG\" , \"pieces\" : 0 , \"ready_time\" : \"string\" , \"closing_time\" : \"string\" , \"instruction\" : \"string\" , \"package_location\" : \"string\" , \"city\" : \"string\" , \"postal_code\" : \"string\" , \"state\" : \"string\" , \"state_code\" : \"string\" , \"country_name\" : \"string\" , \"country_code\" : \"string\" , \"person_name\" : \"string\" , \"company_name\" : \"string\" , \"phone_number\" : \"string\" , \"email_address\" : \"string\" , \"is_business\" : true , \"confirmation_number\" : \"string\" , \"address_lines\" : [ \"address 1\" \"address 2\" ], \"extra\" : { \"extra_field\" : \"\" } } Pickup update pickup_update = purplship . pickup . update ( ... ) . from_ ( dhl ) . parse () Pickup cancellation pickup_update = purplship . pickup . cancel ( ... ) . from_ ( dhl ) . parse ()","title":"Pickup"},{"location":"basic/pickup/#pickup","text":"","title":"Pickup"},{"location":"basic/pickup/#pickup-booking","text":"import purplship dhl = purplship . gateway [ 'dhl' ] . create ({ ... }) pickup_booking = purplship . pickup . book ( ** { \"date\" : \"2013-10-19\" , \"account_number\" : \"123456789\" , \"pieces\" : 2 , \"weight\" : 20 , \"weight_unit\" : \"L\" , \"ready_time\" : \"10:20:00\" , \"closing_time\" : \"09:20:00\" , \"city\" : \"Montreal\" , \"postal_code\" : \"H8Z2Z3\" , \"person_name\" : \"Subhayu\" , \"phone_number\" : \"4801313131\" , \"region_code\" : \"QC\" , \"country_code\" : \"CA\" , \"email_address\" : \"test@mail.com\" , \"instruction\" : \"behind the front desk\" , \"address_lines\" : [ \"234 rue Hubert\" ], \"extra\" : { \"RequestorContact\" : { \"PersonName\" : \"Rikhil\" , \"Phone\" : \"23162\" } } }) . with_ ( dhl ) response = pickup_booking . parse () from gds_helpers import to_dict print ( to_dict ( response )) [ { \"carrier\" : \"carrier_name\" , \"confirmation_number\" : \"3674\" , \"pickup_date\" : \"2013-10-09\" , \"ref_times\" : [ { \"name\" : \"ReadyByTime\" , \"value\" : \"10:30\" }, { \"name\" : \"CallInTime\" , \"value\" : \"08:30\" } ] }, [] ]","title":"Pickup booking"},{"location":"basic/pickup/#pickup-request-and-update-request-payload","text":"{ \"date\" : \"string\" , \"account_number\" : \"string\" , \"weight\" : 0 , \"weight_unit\" : \"KG\" , \"pieces\" : 0 , \"ready_time\" : \"string\" , \"closing_time\" : \"string\" , \"instruction\" : \"string\" , \"package_location\" : \"string\" , \"city\" : \"string\" , \"postal_code\" : \"string\" , \"state\" : \"string\" , \"state_code\" : \"string\" , \"country_name\" : \"string\" , \"country_code\" : \"string\" , \"person_name\" : \"string\" , \"company_name\" : \"string\" , \"phone_number\" : \"string\" , \"email_address\" : \"string\" , \"is_business\" : true , \"confirmation_number\" : \"string\" , \"address_lines\" : [ \"address 1\" \"address 2\" ], \"extra\" : { \"extra_field\" : \"\" } }","title":"Pickup request and update request payload"},{"location":"basic/pickup/#pickup-update","text":"pickup_update = purplship . pickup . update ( ... ) . from_ ( dhl ) . parse ()","title":"Pickup update"},{"location":"basic/pickup/#pickup-cancellation","text":"pickup_update = purplship . pickup . cancel ( ... ) . from_ ( dhl ) . parse ()","title":"Pickup cancellation"},{"location":"basic/rating/","text":"Quotes (Rate) Use a proxy, and it's mapper to get a carrier quote. from purplship.domain.entities import Quote from gds_helpers import jsonify # JSON data shipper = { \"address\" : { \"postal_code\" : \"H3N1S4\" , \"country_code\" : \"CA\" }} recipient = { \"address\" : { \"city\" : \"Lome\" , \"country_code\" : \"TG\" }} shipment_details = { \"packages\" : [{ \"id\" : \"1\" , \"height\" : 3 , \"lenght\" : 10 , \"width\" : 3 , \"weight\" : 4.0 }]} # create a domain quote payload entity from the json data # this operation will also validate the data quote_payload = Quote . create ( shipper = shipper , recipient = recipient , shipment_details = shipment_details ) # get a carrier quote request xml object from the quote payload request = proxy . mapper . create_quote_request ( quote_payload ) # send a quote request to the carrier servers using the proxy response = proxy . get_quotes ( request ) # extract the domain quote entity from the carrier quote response quotes = proxy . mapper . parse_quote_response ( response ) print ( jsonify ( quotes )) # --> ''' [ [ { \"base_charge\": 230.49, \"carrier\": \"carrier\", \"delivery_date\": null, \"delivery_time\": null, \"discount\": 0.0, \"duties_and_taxes\": 0.0, \"extra_charges\": [ { \"name\": \"FUEL\", \"value\": 9.22 } ], \"pickup_date\": null, \"pickup_time\": null, \"service_name\": \"INTERNATIONAL_PRIORITY\", \"service_type\": \"PAYOR_ACCOUNT_SHIPMENT\", \"total_charge\": 239.71 }, { \"base_charge\": 207.47, \"carrier\": \"carrier\", \"delivery_date\": null, \"delivery_time\": null, \"discount\": 0.0, \"duties_and_taxes\": 0.0, \"extra_charges\": [ { \"name\": \"FUEL\", \"value\": 8.3 } ], \"pickup_date\": null, \"pickup_time\": null, \"service_name\": \"INTERNATIONAL_ECONOMY\", \"service_type\": \"PAYOR_ACCOUNT_SHIPMENT\", \"total_charge\": 215.77 } ], [] ] '''","title":"Rating"},{"location":"basic/rating/#quotes-rate","text":"Use a proxy, and it's mapper to get a carrier quote. from purplship.domain.entities import Quote from gds_helpers import jsonify # JSON data shipper = { \"address\" : { \"postal_code\" : \"H3N1S4\" , \"country_code\" : \"CA\" }} recipient = { \"address\" : { \"city\" : \"Lome\" , \"country_code\" : \"TG\" }} shipment_details = { \"packages\" : [{ \"id\" : \"1\" , \"height\" : 3 , \"lenght\" : 10 , \"width\" : 3 , \"weight\" : 4.0 }]} # create a domain quote payload entity from the json data # this operation will also validate the data quote_payload = Quote . create ( shipper = shipper , recipient = recipient , shipment_details = shipment_details ) # get a carrier quote request xml object from the quote payload request = proxy . mapper . create_quote_request ( quote_payload ) # send a quote request to the carrier servers using the proxy response = proxy . get_quotes ( request ) # extract the domain quote entity from the carrier quote response quotes = proxy . mapper . parse_quote_response ( response ) print ( jsonify ( quotes )) # --> ''' [ [ { \"base_charge\": 230.49, \"carrier\": \"carrier\", \"delivery_date\": null, \"delivery_time\": null, \"discount\": 0.0, \"duties_and_taxes\": 0.0, \"extra_charges\": [ { \"name\": \"FUEL\", \"value\": 9.22 } ], \"pickup_date\": null, \"pickup_time\": null, \"service_name\": \"INTERNATIONAL_PRIORITY\", \"service_type\": \"PAYOR_ACCOUNT_SHIPMENT\", \"total_charge\": 239.71 }, { \"base_charge\": 207.47, \"carrier\": \"carrier\", \"delivery_date\": null, \"delivery_time\": null, \"discount\": 0.0, \"duties_and_taxes\": 0.0, \"extra_charges\": [ { \"name\": \"FUEL\", \"value\": 8.3 } ], \"pickup_date\": null, \"pickup_time\": null, \"service_name\": \"INTERNATIONAL_ECONOMY\", \"service_type\": \"PAYOR_ACCOUNT_SHIPMENT\", \"total_charge\": 215.77 } ], [] ] '''","title":"Quotes (Rate)"},{"location":"basic/shipping/","text":"Shipping Use a proxy and, it's mapper to create a shipment. from purplship.domain.entities import Shipment # JSON data shipper = { \"company_name\" : \"shipper company privated limited 12\" , \"address_lines\" : [ \"238 850925434 Drive\" ], \"city\" : \"Scottsdale\" , \"postal_code\" : \"85260\" , \"country_code\" : \"US\" , \"country_name\" : \"United States of America\" , \"person_name\" : \"Ms Lucian\" , \"phone_number\" : \"1 23 8613402\" , \"email_address\" : \"test@email.com\" , \"region\" : \"Arizona\" , \"region_code\" : \"AZ\" , \"extra\" : { \"ShipperID\" : \"123456789\" , \"RegisteredAccount\" : \"123456789\" , \"PhoneExtension\" : \"3403\" , \"FaxNumber\" : \"1 905 8613411\" , \"Telex\" : \"1245\" } } recipient = { \"company_name\" : \"IBM Bruse Pte Ltd\" , \"address_lines\" : [ \"9 Business Park Central 1\" , \"3th Floor\" , \"The IBM Place\" ], \"city\" : \"Brussels\" , \"postal_code\" : \"1060\" , \"country_code\" : \"BE\" , \"country_name\" : \"Belgium\" , \"person_name\" : \"Mrs Orlander\" , \"phone_number\" : \"506-851-2271\" , \"email_address\" : \"c_orlander@gc.ca\" , \"extra\" : { \"PhoneExtension\" : \"7862\" , \"FaxNumber\" : \"506-851-7403\" , \"Telex\" : \"506-851-7121\" } } shipment = { \"packages\" : [{ \"id\" : \"1\" , \"height\" : 3 , \"length\" : 10 , \"width\" : 3 , \"weight\" : 4.0 , \"packaging_type\" : \"EE\" }], \"is_document\" : False , \"shipper_account_number\" : \"123456789\" , \"paid_by\" : \"S\" , \"payment_account_number\" : \"123456789\" , \"duty_paid_by\" : \"S\" , \"duty_payment_account\" : \"123456789\" , \"declared_value\" : 200.00 , \"label\" : { \"type\" : \"CIN\" , \"format\" : \"PDF\" , \"extra\" : { \"Image\" : b \"SUkqAAgA\" }}, \"services\" : [ \"WY\" ], \"commodities\" : [{ \"code\" : \"cc\" , \"description\" : \"cn\" }], \"extra\" : { \"EProcShip\" : \"N\" , \"GlobalProductCode\" : \"P\" , \"LocalProductCode\" : \"P\" }, \"customs\" : { \"terms_of_trade\" : \"DAP\" , \"extra\" : { \"ScheduleB\" : \"3002905110\" , \"ExportLicense\" : \"D123456\" , \"ShipperEIN\" : \"112233445566\" , \"ShipperIDType\" : \"S\" , \"ImportLicense\" : \"ImportLic\" , \"ConsigneeEIN\" : \"ConEIN2123\" } } } # create a domain shipping payload entity from the json data # this operation will also validate the data shipping_payload = Shipment . create ( shipper = shipper , recipient = recipient , shipment = shipment ) # get a carrier shipping request xml object from the quote payload shipping_request = proxy . mapper . create_shipment_request ( shipping_payload ) # send a shipping request to the carrier servers using the proxy response = proxy . create_shipping ( shipping_request ) # extract the domain shipping entity from the carrier shipping response shipping = proxy . mapper . parse_shipping_response ( response ) print ( jsonify ( shipping )) # --> ''' [ { 'carrier': 'carrier_name', 'documents': [ 'iVBORw0KGgoAAAANSUhEUgAAAYwAAABeAQMAAAAKdrGZAAAABlBMVEX///8AAABVwtN+AAAAaklEQVR42mNkYGBIyL8w5a9P7YJXKU8ZgkU2V81cNmWt5IIokaMMX40+N6zsivI+93bZRDMx13vzlRYwMDAxkAxGtYxqGdUyqmVUy6iWUS2jWka1jGoZ1TKqZVTLqJZRLaNaRrWMaiEVAAB3uBe8nSip8QAAAABJRU5ErkJggg==', 'iVBORw0KGgoAAAANSUhEUgAAAZYAAABeAQMAAAA6+qC4AAAABlBMVEX///8AAABVwtN+AAAAZ0lEQVR42u3LIRJAUBRA0Ufwk6IY0eqMLBnBS/yi6Gb8XdiBPRBoZE1iDZpwTz+eiJRhNey2qNNZjUZnMMaLmzVR6W5TNfGaNe46Wp3kybfeivjyHYfD4XA4HA6Hw+FwOBwOh/On8wLTGBe8mbtkhgAAAABJRU5ErkJggg==', 'iVBORw0KGgoAAAANSUhEUgAAAYwAAABeAQMAAAAKdrGZAAAABlBMVEX///8AAABVwtN+AAAAaklEQVR42mNkYGBIyL8w5a9P7YJXKU8ZgkU2V81cNmWt5IIokaMMX40+N6zsivI+93bZRDMx13vzlRYwMDAxkAxGtYxqGdUyqmVUy6iWUS2jWka1jGoZ1TKqZVTLqJZRLaNaRrWMaiEVAAB3uBe8nSip8QAAAABJRU5ErkJggg==', 'iVBORw0KGgoAAAANSUhEUgAAATUAAABeAQMAAAB4lRFqAAAABlBMVEX///8AAABVwtN+AAAAVklEQVR42mNkYGBIyL8whdvO9d6UK0e/3puyeZrrvfkaYnOvlzGm6v4Sjsq/MPECAwMTA3FgVN2oulF1o+pG1Y2qG1U3qm5U3ai6UXWj6kbVjaqjhjoAdiwSvEkaxBcAAAAASUVORK5CYII=', 'iVBORw0KGgoAAAANSUhEUgAAARgAAAAkAQMAAABoj7etAAAABlBMVEX///8AAABVwtN+AAAAPElEQVR42mNkYGBIyL8wZcutGwyvUp4yBMtriM295XDlxCm29MRU31ufpRgYmBgIg1E1o2pG1YyqGepqAKFJD0hDGoJfAAAAAElFTkSuQmCC', 'iVBORw0KGgoAAAANSUhEUgAAAawAAABeAQMAAABFK7JJAAAABlBMVEX///8AAABVwtN+AAAAaUlEQVR42u3LoRVAUACG0Z/gKLKjOK+YhRlMIOko7xUDSBqSUQyhaFYgsYMkfLdfT1ITdUdcL+PtNpuEqYrJJjZ3g06XXZ7Rs1cKZil2TV+ubW4kX5/QaDQajUaj0Wg0Go1Go9FotH+3F1GxE7xDV+SvAAAAAElFTkSuQmCC' ], 'reference': { 'type': 'St', 'value': 'reference' }, 'service': 'EXPRESS WORLDWIDE', 'shipment_date': '2017-11-10', 'total_charge': { 'amount': '155.160', 'currency': 'USD', 'name': 'Shipment charge' }, 'tracking_number': '0044650491' }, [] ] '''","title":"Shipping"},{"location":"basic/shipping/#shipping","text":"Use a proxy and, it's mapper to create a shipment. from purplship.domain.entities import Shipment # JSON data shipper = { \"company_name\" : \"shipper company privated limited 12\" , \"address_lines\" : [ \"238 850925434 Drive\" ], \"city\" : \"Scottsdale\" , \"postal_code\" : \"85260\" , \"country_code\" : \"US\" , \"country_name\" : \"United States of America\" , \"person_name\" : \"Ms Lucian\" , \"phone_number\" : \"1 23 8613402\" , \"email_address\" : \"test@email.com\" , \"region\" : \"Arizona\" , \"region_code\" : \"AZ\" , \"extra\" : { \"ShipperID\" : \"123456789\" , \"RegisteredAccount\" : \"123456789\" , \"PhoneExtension\" : \"3403\" , \"FaxNumber\" : \"1 905 8613411\" , \"Telex\" : \"1245\" } } recipient = { \"company_name\" : \"IBM Bruse Pte Ltd\" , \"address_lines\" : [ \"9 Business Park Central 1\" , \"3th Floor\" , \"The IBM Place\" ], \"city\" : \"Brussels\" , \"postal_code\" : \"1060\" , \"country_code\" : \"BE\" , \"country_name\" : \"Belgium\" , \"person_name\" : \"Mrs Orlander\" , \"phone_number\" : \"506-851-2271\" , \"email_address\" : \"c_orlander@gc.ca\" , \"extra\" : { \"PhoneExtension\" : \"7862\" , \"FaxNumber\" : \"506-851-7403\" , \"Telex\" : \"506-851-7121\" } } shipment = { \"packages\" : [{ \"id\" : \"1\" , \"height\" : 3 , \"length\" : 10 , \"width\" : 3 , \"weight\" : 4.0 , \"packaging_type\" : \"EE\" }], \"is_document\" : False , \"shipper_account_number\" : \"123456789\" , \"paid_by\" : \"S\" , \"payment_account_number\" : \"123456789\" , \"duty_paid_by\" : \"S\" , \"duty_payment_account\" : \"123456789\" , \"declared_value\" : 200.00 , \"label\" : { \"type\" : \"CIN\" , \"format\" : \"PDF\" , \"extra\" : { \"Image\" : b \"SUkqAAgA\" }}, \"services\" : [ \"WY\" ], \"commodities\" : [{ \"code\" : \"cc\" , \"description\" : \"cn\" }], \"extra\" : { \"EProcShip\" : \"N\" , \"GlobalProductCode\" : \"P\" , \"LocalProductCode\" : \"P\" }, \"customs\" : { \"terms_of_trade\" : \"DAP\" , \"extra\" : { \"ScheduleB\" : \"3002905110\" , \"ExportLicense\" : \"D123456\" , \"ShipperEIN\" : \"112233445566\" , \"ShipperIDType\" : \"S\" , \"ImportLicense\" : \"ImportLic\" , \"ConsigneeEIN\" : \"ConEIN2123\" } } } # create a domain shipping payload entity from the json data # this operation will also validate the data shipping_payload = Shipment . create ( shipper = shipper , recipient = recipient , shipment = shipment ) # get a carrier shipping request xml object from the quote payload shipping_request = proxy . mapper . create_shipment_request ( shipping_payload ) # send a shipping request to the carrier servers using the proxy response = proxy . create_shipping ( shipping_request ) # extract the domain shipping entity from the carrier shipping response shipping = proxy . mapper . parse_shipping_response ( response ) print ( jsonify ( shipping )) # --> ''' [ { 'carrier': 'carrier_name', 'documents': [ 'iVBORw0KGgoAAAANSUhEUgAAAYwAAABeAQMAAAAKdrGZAAAABlBMVEX///8AAABVwtN+AAAAaklEQVR42mNkYGBIyL8w5a9P7YJXKU8ZgkU2V81cNmWt5IIokaMMX40+N6zsivI+93bZRDMx13vzlRYwMDAxkAxGtYxqGdUyqmVUy6iWUS2jWka1jGoZ1TKqZVTLqJZRLaNaRrWMaiEVAAB3uBe8nSip8QAAAABJRU5ErkJggg==', 'iVBORw0KGgoAAAANSUhEUgAAAZYAAABeAQMAAAA6+qC4AAAABlBMVEX///8AAABVwtN+AAAAZ0lEQVR42u3LIRJAUBRA0Ufwk6IY0eqMLBnBS/yi6Gb8XdiBPRBoZE1iDZpwTz+eiJRhNey2qNNZjUZnMMaLmzVR6W5TNfGaNe46Wp3kybfeivjyHYfD4XA4HA6Hw+FwOBwOh/On8wLTGBe8mbtkhgAAAABJRU5ErkJggg==', 'iVBORw0KGgoAAAANSUhEUgAAAYwAAABeAQMAAAAKdrGZAAAABlBMVEX///8AAABVwtN+AAAAaklEQVR42mNkYGBIyL8w5a9P7YJXKU8ZgkU2V81cNmWt5IIokaMMX40+N6zsivI+93bZRDMx13vzlRYwMDAxkAxGtYxqGdUyqmVUy6iWUS2jWka1jGoZ1TKqZVTLqJZRLaNaRrWMaiEVAAB3uBe8nSip8QAAAABJRU5ErkJggg==', 'iVBORw0KGgoAAAANSUhEUgAAATUAAABeAQMAAAB4lRFqAAAABlBMVEX///8AAABVwtN+AAAAVklEQVR42mNkYGBIyL8whdvO9d6UK0e/3puyeZrrvfkaYnOvlzGm6v4Sjsq/MPECAwMTA3FgVN2oulF1o+pG1Y2qG1U3qm5U3ai6UXWj6kbVjaqjhjoAdiwSvEkaxBcAAAAASUVORK5CYII=', 'iVBORw0KGgoAAAANSUhEUgAAARgAAAAkAQMAAABoj7etAAAABlBMVEX///8AAABVwtN+AAAAPElEQVR42mNkYGBIyL8wZcutGwyvUp4yBMtriM295XDlxCm29MRU31ufpRgYmBgIg1E1o2pG1YyqGepqAKFJD0hDGoJfAAAAAElFTkSuQmCC', 'iVBORw0KGgoAAAANSUhEUgAAAawAAABeAQMAAABFK7JJAAAABlBMVEX///8AAABVwtN+AAAAaUlEQVR42u3LoRVAUACG0Z/gKLKjOK+YhRlMIOko7xUDSBqSUQyhaFYgsYMkfLdfT1ITdUdcL+PtNpuEqYrJJjZ3g06XXZ7Rs1cKZil2TV+ubW4kX5/QaDQajUaj0Wg0Go1Go9FotH+3F1GxE7xDV+SvAAAAAElFTkSuQmCC' ], 'reference': { 'type': 'St', 'value': 'reference' }, 'service': 'EXPRESS WORLDWIDE', 'shipment_date': '2017-11-10', 'total_charge': { 'amount': '155.160', 'currency': 'USD', 'name': 'Shipment charge' }, 'tracking_number': '0044650491' }, [] ] '''","title":"Shipping"},{"location":"basic/tracking/","text":"Tracking Use a proxy, and it's mapper get trackings. from purplship.domain.entities import Tracking # JSON data tracking_numbers = [ \"7740842550\" , \"1815115363\" ] # create a domain tracking payload entity from the json data # this operation will also validate the data tracking_payload = Tracking . create ( tracking_numbers = tracking_numbers ) # get a carrier tracking request xml object from the tracking payload tracking_request = proxy . mapper . create_tracking_request ( tracking_payload ) # send a tracking request to the carrier servers using the proxy response = proxy . get_trackings ( tracking_request ) # extract the domain tracking entity from the carrier tracking response trackings = proxy . mapper . parse_tracking_response ( response ) print ( jsonify ( trackings )) # --> ''' [ [ { \"carrier\": \"carrier_name\", \"events\": [ { \"code\": \"PU\", \"date\": \"2009-08-26\", \"description\": \"Shipment picked up\", \"location\": \"Singapore - Singapore \", \"signatory\": \"\", \"time\": \"10:00:00\" } ], \"shipment_date\": \"2009-08-26 10:00:00\", \"tracking_number\": \"7740842550\" }, { \"carrier\": \"carrier_name\", \"events\": [ { \"code\": \"PU\", \"date\": \"2009-08-13\", \"description\": \"Shipment picked up\", \"location\": \"Hong Kong - Hong Kong \", \"signatory\": \"\", \"time\": \"23:58:00\" }, { \"code\": \"RW\", \"date\": \"2009-08-14\", \"description\": \"\", \"location\": \"Hong Kong - Hong Kong \", \"signatory\": \"21.20\", \"time\": \"02:19:50\" } ], \"shipment_date\": \"2009-08-13 23:58:00\", \"tracking_number\": \"1815115363\" } ], [] ] '''","title":"Tracking"},{"location":"basic/tracking/#tracking","text":"Use a proxy, and it's mapper get trackings. from purplship.domain.entities import Tracking # JSON data tracking_numbers = [ \"7740842550\" , \"1815115363\" ] # create a domain tracking payload entity from the json data # this operation will also validate the data tracking_payload = Tracking . create ( tracking_numbers = tracking_numbers ) # get a carrier tracking request xml object from the tracking payload tracking_request = proxy . mapper . create_tracking_request ( tracking_payload ) # send a tracking request to the carrier servers using the proxy response = proxy . get_trackings ( tracking_request ) # extract the domain tracking entity from the carrier tracking response trackings = proxy . mapper . parse_tracking_response ( response ) print ( jsonify ( trackings )) # --> ''' [ [ { \"carrier\": \"carrier_name\", \"events\": [ { \"code\": \"PU\", \"date\": \"2009-08-26\", \"description\": \"Shipment picked up\", \"location\": \"Singapore - Singapore \", \"signatory\": \"\", \"time\": \"10:00:00\" } ], \"shipment_date\": \"2009-08-26 10:00:00\", \"tracking_number\": \"7740842550\" }, { \"carrier\": \"carrier_name\", \"events\": [ { \"code\": \"PU\", \"date\": \"2009-08-13\", \"description\": \"Shipment picked up\", \"location\": \"Hong Kong - Hong Kong \", \"signatory\": \"\", \"time\": \"23:58:00\" }, { \"code\": \"RW\", \"date\": \"2009-08-14\", \"description\": \"\", \"location\": \"Hong Kong - Hong Kong \", \"signatory\": \"21.20\", \"time\": \"02:19:50\" } ], \"shipment_date\": \"2009-08-13 23:58:00\", \"tracking_number\": \"1815115363\" } ], [] ] '''","title":"Tracking"},{"location":"carriers/aups/","text":"","title":"Australia Post"},{"location":"carriers/caps/","text":"","title":"Canada Post"},{"location":"carriers/dhl/","text":"","title":"DHL"},{"location":"carriers/fedex/","text":"","title":"FedEx"},{"location":"carriers/sendle/","text":"","title":"Sendle"},{"location":"carriers/ups/","text":"","title":"UPS"},{"location":"contributing/architecture/","text":"JSON In ... JSON out Abstractions Domain Client The client holds all data related to specific carrier API credentials and configurations from purplship.mappers.dhl import DHLClient dhlClient = DHLClient ( \"https://xmlpi-ea.dhl.com/XMLShippingServlet\" , \"YOUR_DHL_SITE_ID\" , \"YOUR_DHL_SITE_PASSWORD\" , \"YOUR_DHL_ACCOUNT_NUMBER\" , \"CARRIER_NAME\" # optional, will be DHL by default ) Proxy The proxy takes care of the communication with the specific carrier's open API Proxy Pattern from purplship.mappers.dhl import DHLProxy dhlProxy = DHLProxy ( dhlClient ) Or create a proxy with a custom mapper (If you extend or implement your own compatible Mapper). from purplship.mappers.dhl.dhl_mapper import DHLMapper dhlMapper = DHLMapper ( dhlClient ) customProxy = DHLProxy ( dhlClient , dhlMapper ) Mapper The mapper handles the conversion from PurplShip united API Data types to Carrier specific API Datatypes. Note: Here is the core of PurplShip extensibility and customizability. You can extend the default mapper or write your own. In most common cases the developer integrating a shipping carrier API has to write or extend mappers Data mapper Pattern Unified Data Models Defined by cross-referencing common data types among multiple carriers, the unified data types constitute an intuitive shared API interface. Explore the library API to know more about the type definitions.","title":"Architecture"},{"location":"contributing/architecture/#json-in-json-out","text":"","title":"JSON In ... JSON out"},{"location":"contributing/architecture/#abstractions","text":"","title":"Abstractions"},{"location":"contributing/architecture/#domain","text":"","title":"Domain"},{"location":"contributing/architecture/#client","text":"The client holds all data related to specific carrier API credentials and configurations from purplship.mappers.dhl import DHLClient dhlClient = DHLClient ( \"https://xmlpi-ea.dhl.com/XMLShippingServlet\" , \"YOUR_DHL_SITE_ID\" , \"YOUR_DHL_SITE_PASSWORD\" , \"YOUR_DHL_ACCOUNT_NUMBER\" , \"CARRIER_NAME\" # optional, will be DHL by default )","title":"Client"},{"location":"contributing/architecture/#proxy","text":"The proxy takes care of the communication with the specific carrier's open API Proxy Pattern from purplship.mappers.dhl import DHLProxy dhlProxy = DHLProxy ( dhlClient ) Or create a proxy with a custom mapper (If you extend or implement your own compatible Mapper). from purplship.mappers.dhl.dhl_mapper import DHLMapper dhlMapper = DHLMapper ( dhlClient ) customProxy = DHLProxy ( dhlClient , dhlMapper )","title":"Proxy"},{"location":"contributing/architecture/#mapper","text":"The mapper handles the conversion from PurplShip united API Data types to Carrier specific API Datatypes. Note: Here is the core of PurplShip extensibility and customizability. You can extend the default mapper or write your own. In most common cases the developer integrating a shipping carrier API has to write or extend mappers Data mapper Pattern","title":"Mapper"},{"location":"contributing/architecture/#unified-data-models","text":"Defined by cross-referencing common data types among multiple carriers, the unified data types constitute an intuitive shared API interface. Explore the library API to know more about the type definitions.","title":"Unified Data Models"}]}