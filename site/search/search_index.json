{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to PurplShip Overview PurplShip is an open source library that makes shipping carrier API integration easy. PurplShip proposes an intuitive unified API, to make multi-carrier integration seamless. Integrate multiple carriers: DHL, FedEx, UPS, Canada Post and more with ease Use an intuitive, unified API across multiple carriers Use your developer credentials and your negotiated rates PurplShip helps quickly getting started with shipping services as it is easy to use: import purplship dhl = purplship . gateway [ 'dhl' ] . create ({ \"site_id\" : \"username\" , \"password\" : \"password\" }) response = purplship . rating . fetch ({ \"shipper\" : { \"postal_code\" : \"H3N1S4\" , \"country_code\" : \"CA\" }, \"recipient\" : { \"city\" : \"Lome\" , \"country_code\" : \"TG\" }, \"shipment\" : { \"items\" : [ { \"height\" : 3 , \"length\" : 10 , \"width\" : 3 , \"weight\" : 4.0 } ] } }) . from_ ( dhl ) rates = response . parse () from gds_helpers import to_dict print ( to_dict ( rates )) [ [], //Errors [ //Rates { \"base_charge\" : 62.66 , \"carrier\" : \"DHL\" , \"currency\" : \"CAD\" , \"delivery_date\" : \"2018-10-25 10:30:00\" , \"discount\" : 0 , \"duties_and_taxes\" : 0 , \"extra_charges\" : [ { \"amount\" : 8.0 , \"currency\" : \"CAD\" , \"name\" : \"10:30 PREMIUM\" }, { \"amount\" : 5.12 , \"currency\" : \"CAD\" , \"name\" : \"FUEL SURCHARGE\" } ], \"service_name\" : \"EXPRESS 10:30 DOC\" , \"service_type\" : \"TD\" , \"total_charge\" : 75.78 }, { \"base_charge\" : 62.66 , \"carrier\" : \"DHL\" , \"currency\" : \"CAD\" , \"delivery_date\" : \"2018-10-25 11:59:00\" , \"discount\" : 0 , \"duties_and_taxes\" : 0 , \"extra_charges\" : [ { \"amount\" : 4.54 , \"currency\" : \"CAD\" , \"name\" : \"FUEL SURCHARGE\" } ], \"service_name\" : \"EXPRESS WORLDWIDE DOC\" , \"service_type\" : \"TD\" , \"total_charge\" : 67.2 } ] ] Prerequisites PurplShip is compatible with Python 3 + Installing PurplShip can be installed with pip : Released version (specify a purplship==version if needed) pip install -f https://git.io/purplship purplship From Source : git clone https://github.com/PurplShip/purplship.git pip install --process-dependency-links -e purplship Table of content Basic Rating Tracking Shipping Pickup Fluent API Carriers Australia Post Canada Post DHL FedEx Sendle UPS Advanced Single Carrier Multi Carrier Extra Default Shipping Options Freight Healthcare Contributing Architecture Use case Roadmap FAQ License This project is licensed under the LGPL v3 License - see the LICENSE.md file for details Contributing We happily welcome contributions, please see CONTRIBUTING.md for details.","title":"Home"},{"location":"#welcome-to-purplship","text":"","title":"Welcome to PurplShip"},{"location":"#overview","text":"PurplShip is an open source library that makes shipping carrier API integration easy. PurplShip proposes an intuitive unified API, to make multi-carrier integration seamless. Integrate multiple carriers: DHL, FedEx, UPS, Canada Post and more with ease Use an intuitive, unified API across multiple carriers Use your developer credentials and your negotiated rates PurplShip helps quickly getting started with shipping services as it is easy to use: import purplship dhl = purplship . gateway [ 'dhl' ] . create ({ \"site_id\" : \"username\" , \"password\" : \"password\" }) response = purplship . rating . fetch ({ \"shipper\" : { \"postal_code\" : \"H3N1S4\" , \"country_code\" : \"CA\" }, \"recipient\" : { \"city\" : \"Lome\" , \"country_code\" : \"TG\" }, \"shipment\" : { \"items\" : [ { \"height\" : 3 , \"length\" : 10 , \"width\" : 3 , \"weight\" : 4.0 } ] } }) . from_ ( dhl ) rates = response . parse () from gds_helpers import to_dict print ( to_dict ( rates )) [ [], //Errors [ //Rates { \"base_charge\" : 62.66 , \"carrier\" : \"DHL\" , \"currency\" : \"CAD\" , \"delivery_date\" : \"2018-10-25 10:30:00\" , \"discount\" : 0 , \"duties_and_taxes\" : 0 , \"extra_charges\" : [ { \"amount\" : 8.0 , \"currency\" : \"CAD\" , \"name\" : \"10:30 PREMIUM\" }, { \"amount\" : 5.12 , \"currency\" : \"CAD\" , \"name\" : \"FUEL SURCHARGE\" } ], \"service_name\" : \"EXPRESS 10:30 DOC\" , \"service_type\" : \"TD\" , \"total_charge\" : 75.78 }, { \"base_charge\" : 62.66 , \"carrier\" : \"DHL\" , \"currency\" : \"CAD\" , \"delivery_date\" : \"2018-10-25 11:59:00\" , \"discount\" : 0 , \"duties_and_taxes\" : 0 , \"extra_charges\" : [ { \"amount\" : 4.54 , \"currency\" : \"CAD\" , \"name\" : \"FUEL SURCHARGE\" } ], \"service_name\" : \"EXPRESS WORLDWIDE DOC\" , \"service_type\" : \"TD\" , \"total_charge\" : 67.2 } ] ]","title":"Overview"},{"location":"#prerequisites","text":"PurplShip is compatible with Python 3 +","title":"Prerequisites"},{"location":"#installing","text":"PurplShip can be installed with pip : Released version (specify a purplship==version if needed) pip install -f https://git.io/purplship purplship From Source : git clone https://github.com/PurplShip/purplship.git pip install --process-dependency-links -e purplship","title":"Installing"},{"location":"#table-of-content","text":"Basic Rating Tracking Shipping Pickup Fluent API Carriers Australia Post Canada Post DHL FedEx Sendle UPS Advanced Single Carrier Multi Carrier Extra Default Shipping Options Freight Healthcare Contributing Architecture Use case Roadmap FAQ","title":"Table of content"},{"location":"#license","text":"This project is licensed under the LGPL v3 License - see the LICENSE.md file for details","title":"License"},{"location":"#contributing","text":"We happily welcome contributions, please see CONTRIBUTING.md for details.","title":"Contributing"},{"location":"api/","text":"Use case E-commerce WMS, ERP... Others","title":"API"},{"location":"api/#use-case","text":"","title":"Use case"},{"location":"api/#e-commerce","text":"","title":"E-commerce"},{"location":"api/#wms-erp","text":"","title":"WMS, ERP..."},{"location":"api/#others","text":"","title":"Others"},{"location":"faq/","text":"FAQ What is PurplShip solving? PurplShip offers an open source solution to integrate one or multiple shipping carriers API with ease. Who is PurplShip for? PurplShip is available as a library exposing tools to get the communication with shipping carriers directly from your codebase. Additionaly, the clean JSON in -> JSON out architecture makes it easy to package it as a self contain REST API. What is the benefit of using PurplShip? PurplShip uses the power of open source to offer a strong base to tackle and reduce shipping API integration challenges. Shipping carriers often have docs difficult to follow with omitted vital information, changing constantly. All these pain are relieved by the strong well-tested foundation offered by PurplShip. Is PurplShip easy to use? Yes. PurplShip hides the complexity of dealing with SOAP and XML in favour of a higher level API expressed in simple code.","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#what-is-purplship-solving","text":"PurplShip offers an open source solution to integrate one or multiple shipping carriers API with ease.","title":"What is PurplShip solving?"},{"location":"faq/#who-is-purplship-for","text":"PurplShip is available as a library exposing tools to get the communication with shipping carriers directly from your codebase. Additionaly, the clean JSON in -> JSON out architecture makes it easy to package it as a self contain REST API.","title":"Who is PurplShip for?"},{"location":"faq/#what-is-the-benefit-of-using-purplship","text":"PurplShip uses the power of open source to offer a strong base to tackle and reduce shipping API integration challenges. Shipping carriers often have docs difficult to follow with omitted vital information, changing constantly. All these pain are relieved by the strong well-tested foundation offered by PurplShip.","title":"What is the benefit of using PurplShip?"},{"location":"faq/#is-purplship-easy-to-use","text":"Yes. PurplShip hides the complexity of dealing with SOAP and XML in favour of a higher level API expressed in simple code.","title":"Is PurplShip easy to use?"},{"location":"roadmap/","text":"Roadmap Milestones Design the distinction between Freight and package Unify label format Unify date formats Unify share shipping options Documentation versioning retstructuring Carriers Integration Aramex - Rating - Tracking - Shipping - Pickup Australia Post - Shipping - Pickup Canada Post - Pickup FedEx - Pickup - Freight Purolator - Rating - Tracking - Shipping - Pickup Sendle - Shipping - Pickup UPS - Pickup - Freight USPS - Rating - Tracking - Shipping - Pickup","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"","title":"Roadmap"},{"location":"roadmap/#milestones","text":"Design the distinction between Freight and package Unify label format Unify date formats Unify share shipping options Documentation versioning retstructuring","title":"Milestones"},{"location":"roadmap/#carriers-integration","text":"","title":"Carriers Integration"},{"location":"roadmap/#aramex","text":"- Rating - Tracking - Shipping - Pickup","title":"Aramex"},{"location":"roadmap/#australia-post","text":"- Shipping - Pickup","title":"Australia Post"},{"location":"roadmap/#canada-post","text":"- Pickup","title":"Canada Post"},{"location":"roadmap/#fedex","text":"- Pickup - Freight","title":"FedEx"},{"location":"roadmap/#purolator","text":"- Rating - Tracking - Shipping - Pickup","title":"Purolator"},{"location":"roadmap/#sendle","text":"- Shipping - Pickup","title":"Sendle"},{"location":"roadmap/#ups","text":"- Pickup - Freight","title":"UPS"},{"location":"roadmap/#usps","text":"- Rating - Tracking - Shipping - Pickup","title":"USPS"},{"location":"usage/","text":"Use case E-commerce WMS, ERP... Others","title":"Use case"},{"location":"usage/#use-case","text":"","title":"Use case"},{"location":"usage/#e-commerce","text":"","title":"E-commerce"},{"location":"usage/#wms-erp","text":"","title":"WMS, ERP..."},{"location":"usage/#others","text":"","title":"Others"},{"location":"advanced/carrier/","text":"Single carrier integration (Best practices) Why should you use PurplShip for single carrier integration? Beside facilitating multi-carrier integration, PurplShip offer above all a simple library to connect to any (supported) carriers with ease. The simplicity of the API offer a clear list of arguments required to to request a service form a carrier. It is therefore, the fastest way to get started a carrier shipping API.","title":"Single Carrier"},{"location":"advanced/carrier/#single-carrier-integration-best-practices","text":"","title":"Single carrier integration (Best practices)"},{"location":"advanced/carrier/#why-should-you-use-purplship-for-single-carrier-integration","text":"Beside facilitating multi-carrier integration, PurplShip offer above all a simple library to connect to any (supported) carriers with ease. The simplicity of the API offer a clear list of arguments required to to request a service form a carrier. It is therefore, the fastest way to get started a carrier shipping API.","title":"Why should you use PurplShip for single carrier integration?"},{"location":"advanced/default/","text":"","title":"Default"},{"location":"advanced/extra/","text":"","title":"Extra"},{"location":"advanced/freight/","text":"","title":"Freight"},{"location":"advanced/health/","text":"","title":"Healthcare"},{"location":"advanced/multi-carrier/","text":"Multi-carrier integration (Best practices)","title":"Multi-Carrier"},{"location":"advanced/multi-carrier/#multi-carrier-integration-best-practices","text":"","title":"Multi-carrier integration (Best practices)"},{"location":"advanced/options/","text":"Shipping Options (AKA special services, extra services...)","title":"Shipping Options"},{"location":"advanced/options/#shipping-options-aka-special-services-extra-services","text":"","title":"Shipping Options (AKA special services, extra services...)"},{"location":"basic/fluent-api/","text":"PurplShip Fluent API # Import PurplShip import purplship Gateway JSON carrier_gateway = purplship . gateway [ 'sendle' ] . create ( { \"sendle_id\" : \"user@id\" , \"api_key\" : \"l56berylkghekrb527l5bk7575\" , } ) Typed from pusplship.mappers.sendle import SendleClient carrier_gateway = purplship . gateway [ 'sendle' ] . create ( SendleClient ( sendle_id = \"user@id\" , api_key = \"l56berylkghekrb527l5bk7575\" ) ) Rating Note purplship.rating.fetch(...).from_(carrier_gateway).parse() JSON import purplship rates = purplship . rating . fetch ( { \"shipper\" : { \"city\" : \"string\" , \"type\" : \"string\" , \"tax_id\" : \"string\" , \"person_name\" : \"string\" , \"company_name\" : \"string\" , \"country_code\" : \"string\" , \"phone_number\" : \"string\" , \"email_address\" : \"string\" , \"state_code\" : \"string\" , \"suburb\" : \"string\" , \"postal_code\" : \"string\" , \"address_lines\" : [], \"account_number\" : \"string\" , \"extra\" : {} }, \"recipient\" : { \"city\" : \"string\" , \"type\" : \"string\" , \"tax_id\" : \"string\" , \"person_name\" : \"string\" , \"company_name\" : \"string\" , \"country_code\" : \"string\" , \"phone_number\" : \"string\" , \"email_address\" : \"string\" , \"state_code\" : \"string\" , \"suburb\" : \"string\" , \"postal_code\" : \"string\" , \"address_lines\" : [], \"account_number\" : \"string\" , \"extra\" : {} }, \"shipment\" : { \"items\" : [], \"insured_amount\" : 0 , \"total_items\" : 0 , \"packaging_type\" : \"BOX\" , \"is_document\" : true , \"currency\" : \"EUR\" , \"total_weight\" : 0 , \"weight_unit\" : \"KG\" , \"dimension_unit\" : \"CM\" , \"paid_by\" : \"SENDER\" , \"payment_country_code\" : \"string\" , \"payment_account_number\" : \"string\" , \"services\" : [], \"options\" : [], \"date\" : \"string\" , \"payment_type\" : \"string\" , \"duty_paid_by\" : \"SENDER\" , \"duty_payment_account\" : \"string\" , \"declared_value\" : 0 , \"customs\" : {}, \"references\" : [], \"label\" : {}, \"invoice\" : {}, \"doc_images\" : [], \"ship_date\" : \"string\" , \"extra\" : {} } } ) Typed from pusplship.domain.Types import ( Item , Party , Customs , Shipment , Label , Doc , Invoice , Option , RateRequest ) rates = purplship . rating . fetch ( RateRequest ( shipper = Party ( city = \"string\" , type = \"string\" , tax_id = \"string\" , person_name = \"string\" , company_name = \"string\" , country_name = \"string\" , country_code = \"string\" , phone_number = \"string\" , email_address = \"string\" , state_code = \"string\" , suburb = \"string\" , postal_code = \"string\" , address_lines = [], account_number = \"string\" , extra = {} ), recipient = Party ( city = \"string\" , type = \"string\" , tax_id = \"string\" , person_name = \"string\" , company_name = \"string\" , country_name = \"string\" , country_code = \"string\" , phone_number = \"string\" , email_address = \"string\" , state_code = \"string\" , suburb = \"string\" , postal_code = \"string\" , address_lines = [], account_number = \"string\" , extra = {} ), shipment = Shipment ( items = [ Item ( id = \"string\" , weight = 0.0 , width = 0.0 , height = 0.0 , length = 10.00 , packaging_type = \"BOX\" , description = \"string\" , content = \"string\" , quantity = 1 , sku = \"string\" , code = \"string\" , value_amount = 0 , value_currency = \"EUR\" , origin_country = \"string\" , extra = {} ) ], insured_amount = 0 , total_items = 0 , packaging_type = \"BOX\" , is_document = true , currency = \"EUR\" , total_weight = 0 , weight_unit = \"KG\" , dimension_unit = \"CM\" , paid_by = \"SENDER\" , payment_country_code = \"string\" , payment_account_number = \"string\" , services = [], options = [ Option ( code = \"string\" , value = {}, extra = {} ) ], date = \"string\" , payment_type = \"string\" , duty_paid_by = \"SENDER\" , duty_payment_account = \"string\" , declared_value = 0 , customs = Customs ( description = \"string\" , terms_of_trade = \"string\" , no_eei = \"string\" , aes = \"string\" , items = [], commercial_invoice = bool , extra = {} ), references = [], label = Label ( format = \"string\" , type = \"string\" , image = \"string\" , extra = {} ), invoice = Invoice ( date = \"string\" , identifier = \"string\" , type = \"string\" , copies = 0 , extra = {} ), doc_images = [ Doc ( format = \"string\" , type = \"string\" , image = \"string\" , extra = {} ) ], ship_date = \"string\" , extra = {} ) ) ) Tracking Note purplship.tracking.fetch(...).from_(carrier_gateway).parse() Shipping Note purplship.shipping.create(...).with_(carrier_gateway).parse() Pickup Book Note purplship.pickup.book(...).with_(carrier_gateway).parse() Update Note purplship.pickup.update(...).from_(carrier_gateway).parse() Cancel Note purplship.pickup.cancel(...).from_(carrier_gateway).parse()","title":"Fluent-API"},{"location":"basic/fluent-api/#purplship-fluent-api","text":"# Import PurplShip import purplship","title":"PurplShip Fluent API"},{"location":"basic/fluent-api/#gateway","text":"JSON carrier_gateway = purplship . gateway [ 'sendle' ] . create ( { \"sendle_id\" : \"user@id\" , \"api_key\" : \"l56berylkghekrb527l5bk7575\" , } ) Typed from pusplship.mappers.sendle import SendleClient carrier_gateway = purplship . gateway [ 'sendle' ] . create ( SendleClient ( sendle_id = \"user@id\" , api_key = \"l56berylkghekrb527l5bk7575\" ) )","title":"Gateway"},{"location":"basic/fluent-api/#rating","text":"Note purplship.rating.fetch(...).from_(carrier_gateway).parse() JSON import purplship rates = purplship . rating . fetch ( { \"shipper\" : { \"city\" : \"string\" , \"type\" : \"string\" , \"tax_id\" : \"string\" , \"person_name\" : \"string\" , \"company_name\" : \"string\" , \"country_code\" : \"string\" , \"phone_number\" : \"string\" , \"email_address\" : \"string\" , \"state_code\" : \"string\" , \"suburb\" : \"string\" , \"postal_code\" : \"string\" , \"address_lines\" : [], \"account_number\" : \"string\" , \"extra\" : {} }, \"recipient\" : { \"city\" : \"string\" , \"type\" : \"string\" , \"tax_id\" : \"string\" , \"person_name\" : \"string\" , \"company_name\" : \"string\" , \"country_code\" : \"string\" , \"phone_number\" : \"string\" , \"email_address\" : \"string\" , \"state_code\" : \"string\" , \"suburb\" : \"string\" , \"postal_code\" : \"string\" , \"address_lines\" : [], \"account_number\" : \"string\" , \"extra\" : {} }, \"shipment\" : { \"items\" : [], \"insured_amount\" : 0 , \"total_items\" : 0 , \"packaging_type\" : \"BOX\" , \"is_document\" : true , \"currency\" : \"EUR\" , \"total_weight\" : 0 , \"weight_unit\" : \"KG\" , \"dimension_unit\" : \"CM\" , \"paid_by\" : \"SENDER\" , \"payment_country_code\" : \"string\" , \"payment_account_number\" : \"string\" , \"services\" : [], \"options\" : [], \"date\" : \"string\" , \"payment_type\" : \"string\" , \"duty_paid_by\" : \"SENDER\" , \"duty_payment_account\" : \"string\" , \"declared_value\" : 0 , \"customs\" : {}, \"references\" : [], \"label\" : {}, \"invoice\" : {}, \"doc_images\" : [], \"ship_date\" : \"string\" , \"extra\" : {} } } ) Typed from pusplship.domain.Types import ( Item , Party , Customs , Shipment , Label , Doc , Invoice , Option , RateRequest ) rates = purplship . rating . fetch ( RateRequest ( shipper = Party ( city = \"string\" , type = \"string\" , tax_id = \"string\" , person_name = \"string\" , company_name = \"string\" , country_name = \"string\" , country_code = \"string\" , phone_number = \"string\" , email_address = \"string\" , state_code = \"string\" , suburb = \"string\" , postal_code = \"string\" , address_lines = [], account_number = \"string\" , extra = {} ), recipient = Party ( city = \"string\" , type = \"string\" , tax_id = \"string\" , person_name = \"string\" , company_name = \"string\" , country_name = \"string\" , country_code = \"string\" , phone_number = \"string\" , email_address = \"string\" , state_code = \"string\" , suburb = \"string\" , postal_code = \"string\" , address_lines = [], account_number = \"string\" , extra = {} ), shipment = Shipment ( items = [ Item ( id = \"string\" , weight = 0.0 , width = 0.0 , height = 0.0 , length = 10.00 , packaging_type = \"BOX\" , description = \"string\" , content = \"string\" , quantity = 1 , sku = \"string\" , code = \"string\" , value_amount = 0 , value_currency = \"EUR\" , origin_country = \"string\" , extra = {} ) ], insured_amount = 0 , total_items = 0 , packaging_type = \"BOX\" , is_document = true , currency = \"EUR\" , total_weight = 0 , weight_unit = \"KG\" , dimension_unit = \"CM\" , paid_by = \"SENDER\" , payment_country_code = \"string\" , payment_account_number = \"string\" , services = [], options = [ Option ( code = \"string\" , value = {}, extra = {} ) ], date = \"string\" , payment_type = \"string\" , duty_paid_by = \"SENDER\" , duty_payment_account = \"string\" , declared_value = 0 , customs = Customs ( description = \"string\" , terms_of_trade = \"string\" , no_eei = \"string\" , aes = \"string\" , items = [], commercial_invoice = bool , extra = {} ), references = [], label = Label ( format = \"string\" , type = \"string\" , image = \"string\" , extra = {} ), invoice = Invoice ( date = \"string\" , identifier = \"string\" , type = \"string\" , copies = 0 , extra = {} ), doc_images = [ Doc ( format = \"string\" , type = \"string\" , image = \"string\" , extra = {} ) ], ship_date = \"string\" , extra = {} ) ) )","title":"Rating"},{"location":"basic/fluent-api/#tracking","text":"Note purplship.tracking.fetch(...).from_(carrier_gateway).parse()","title":"Tracking"},{"location":"basic/fluent-api/#shipping","text":"Note purplship.shipping.create(...).with_(carrier_gateway).parse()","title":"Shipping"},{"location":"basic/fluent-api/#pickup","text":"Book Note purplship.pickup.book(...).with_(carrier_gateway).parse() Update Note purplship.pickup.update(...).from_(carrier_gateway).parse() Cancel Note purplship.pickup.cancel(...).from_(carrier_gateway).parse()","title":"Pickup"},{"location":"basic/pickup/","text":"Pickup Pickup booking from purplship.domain.Types import PickupRequest pickup_booking = PickupRequest ( date = \"2013-10-19\" , account_number = \"123456789\" , pieces = 2 , weight = 2.0 , weight_unit = \"LB\" , ready_time = \"10:20:00\" , closing_time = \"09:20:00\" , city = \"Montreal\" , postal_code = \"H8Z2Z3\" , person_name = \"Subhayu\" , phone_number = \"4801313131\" , region_code = \"QC\" , country_code = \"CA\" , email_address = \"test@mail.com\" , instruction = \"behind the front desk\" , address_lines = [ \"234 rue Hubert\" ], extra = { \"RequestorContact\" : { \"PersonName\" : \"Rikhil\" , \"Phone\" : \"23162\" } } ) # create a carrier specific pickup request object from the rate payload carrier_pickup_booking = proxy . mapper . create_pickup_request ( pickup_booking ) # send a pickup booking request to the carrier servers using the proxy response = proxy . create_pickup_request ( carrier_pickup_booking ) # extract the domain pickup details from the carrier pickup response pickup_details = proxy . mapper . parse_quote_response ( response ) from gds_helpers import to_dict print ( to_dict ( pickup_details )) [ { \"carrier\" : \"carrier_name\" , \"confirmation_number\" : \"3674\" , \"pickup_date\" : \"2013-10-09\" , \"ref_times\" : [ { \"name\" : \"ReadyByTime\" , \"value\" : \"10:30\" }, { \"name\" : \"CallInTime\" , \"value\" : \"08:30\" } ] }, [] ] Pickup update response = proxy . modify_pickup_request ( ... ) Pickup cancellation response = proxy . create_pickup_cancellation_request ( ... ) Datatypes PickupRequest (For Booking and Updte) Name Type Description Notes date str Pickup date [optional] account_number str Shipper account number [optional] weight float Shipment total weight [optional] weight_unit str General package weight unit. Supported Units: \"LB\" (Pound), \"KG\" (Kilogram) default: \"KG\" [optional] [default to 'KG'] pieces float Number of shipment pieces [optional] ready_time str Shipment ready time for pickup. Format: '00:00', 'TT:MM' [optional closing_time str Pickup location closing time. Format: '00:00', 'TT:MM' [optional] instruction str Pickup instruction [optional] package_location str Shipment items location. Ex: Back of the entrance door [optional city str Pickup address city [optional] postal_code str Pickup address postal code [optional] state str Pickup address state or province name [optional] state_code str Pickup address state or province code [optional] country_name str Pickup address country name [optional] country_code str Pickup address country code [optional] person_name str Pickup attention name [optional] company_name str Pickup company name (if company) [optional] phone_number str Phone number [optional] email_address str Email address [optional] is_business bool Flag to specify if pickup address is a business [optional] confirmation_number str Pickup confirmation number (only required for a pickup update) [optional] address_lines list[str] Address lines [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional] Pickup cancellation request Name Type Description Notes pickup_date str Pickup date confirmation_number str Pickup date person_name str Pickup date [optional] country_code str Pickup date [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional]","title":"Pickup"},{"location":"basic/pickup/#pickup","text":"","title":"Pickup"},{"location":"basic/pickup/#pickup-booking","text":"from purplship.domain.Types import PickupRequest pickup_booking = PickupRequest ( date = \"2013-10-19\" , account_number = \"123456789\" , pieces = 2 , weight = 2.0 , weight_unit = \"LB\" , ready_time = \"10:20:00\" , closing_time = \"09:20:00\" , city = \"Montreal\" , postal_code = \"H8Z2Z3\" , person_name = \"Subhayu\" , phone_number = \"4801313131\" , region_code = \"QC\" , country_code = \"CA\" , email_address = \"test@mail.com\" , instruction = \"behind the front desk\" , address_lines = [ \"234 rue Hubert\" ], extra = { \"RequestorContact\" : { \"PersonName\" : \"Rikhil\" , \"Phone\" : \"23162\" } } ) # create a carrier specific pickup request object from the rate payload carrier_pickup_booking = proxy . mapper . create_pickup_request ( pickup_booking ) # send a pickup booking request to the carrier servers using the proxy response = proxy . create_pickup_request ( carrier_pickup_booking ) # extract the domain pickup details from the carrier pickup response pickup_details = proxy . mapper . parse_quote_response ( response ) from gds_helpers import to_dict print ( to_dict ( pickup_details )) [ { \"carrier\" : \"carrier_name\" , \"confirmation_number\" : \"3674\" , \"pickup_date\" : \"2013-10-09\" , \"ref_times\" : [ { \"name\" : \"ReadyByTime\" , \"value\" : \"10:30\" }, { \"name\" : \"CallInTime\" , \"value\" : \"08:30\" } ] }, [] ]","title":"Pickup booking"},{"location":"basic/pickup/#pickup-update","text":"response = proxy . modify_pickup_request ( ... )","title":"Pickup update"},{"location":"basic/pickup/#pickup-cancellation","text":"response = proxy . create_pickup_cancellation_request ( ... )","title":"Pickup cancellation"},{"location":"basic/pickup/#datatypes","text":"","title":"Datatypes"},{"location":"basic/pickup/#pickuprequest-for-booking-and-updte","text":"Name Type Description Notes date str Pickup date [optional] account_number str Shipper account number [optional] weight float Shipment total weight [optional] weight_unit str General package weight unit. Supported Units: \"LB\" (Pound), \"KG\" (Kilogram) default: \"KG\" [optional] [default to 'KG'] pieces float Number of shipment pieces [optional] ready_time str Shipment ready time for pickup. Format: '00:00', 'TT:MM' [optional closing_time str Pickup location closing time. Format: '00:00', 'TT:MM' [optional] instruction str Pickup instruction [optional] package_location str Shipment items location. Ex: Back of the entrance door [optional city str Pickup address city [optional] postal_code str Pickup address postal code [optional] state str Pickup address state or province name [optional] state_code str Pickup address state or province code [optional] country_name str Pickup address country name [optional] country_code str Pickup address country code [optional] person_name str Pickup attention name [optional] company_name str Pickup company name (if company) [optional] phone_number str Phone number [optional] email_address str Email address [optional] is_business bool Flag to specify if pickup address is a business [optional] confirmation_number str Pickup confirmation number (only required for a pickup update) [optional] address_lines list[str] Address lines [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional]","title":"PickupRequest (For Booking and Updte)"},{"location":"basic/pickup/#pickup-cancellation-request","text":"Name Type Description Notes pickup_date str Pickup date confirmation_number str Pickup date person_name str Pickup date [optional] country_code str Pickup date [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional]","title":"Pickup cancellation request"},{"location":"basic/rating/","text":"Rating (Quotes) Use a proxy, and it's mapper to get a carrier quote. from purplship.domain.Types import ( Party , Item , Shipment , RateRequest ) # Request data shipper = Party ( postal_code = \"H3N1S4\" , country_code = \"CA\" ) recipient = Party ( city = \"Lome\" , country_code = \"TG\" ) shipment_details = Shipment ( items = [ Item ( id = \"1\" , height = 3 , lenght = 10 , width = 3 , weight = 4.0 ) ] ) # create a domain quote payload entity from the json data # this operation will also validate the data rate_request = RateRequest ( shipper = shipper , recipient = recipient , shipment_details = shipment_details ) # create a carrier specific quote request object from the rate payload dhl_rate_request = proxy . mapper . create_quote_request ( rate_request ) # send a quote request to the carrier servers using the proxy response = proxy . get_quotes ( dhl_rate_request ) # extract the domain quote entity from the carrier quote response quotes = proxy . mapper . parse_quote_response ( response ) print ( jsonify ( quotes )) # --> ''' [ [ { \"base_charge\": 230.49, \"carrier\": \"carrier\", \"discount\": 0.0, \"duties_and_taxes\": 0.0, \"extra_charges\": [ { \"name\": \"FUEL\", \"value\": 9.22 } ], \"service_name\": \"INTERNATIONAL_PRIORITY\", \"service_type\": \"PAYOR_ACCOUNT_SHIPMENT\", \"total_charge\": 239.71 }, { \"base_charge\": 207.47, \"carrier\": \"carrier\", \"discount\": 0.0, \"duties_and_taxes\": 0.0, \"extra_charges\": [ { \"name\": \"FUEL\", \"value\": 8.3 } ], \"service_name\": \"INTERNATIONAL_ECONOMY\", \"service_type\": \"PAYOR_ACCOUNT_SHIPMENT\", \"total_charge\": 215.77 } ], [] ] ''' Datatypes RateRequest Name Type Description Notes shipper Party recipient Party shipment Shipment Party Name Type Description Notes postal_code str postal code [optional] city str city [optional] type str type (supported by certain carriers) [optional] tax_id str Tax Identification Number [optional] person_name str Attention Name [optional] company_name str Company Name [optional] country_name str Country Name [optional] country_code str Country Code [optional] phone_number str Phone Number [optional] email_address str Email Address [optional] state str Province or State name [optional] state_code str Province or State code [optional] address_lines list[str] Address lines [optional] account_number str Account Number [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional] Shipment Name Type Description Notes items list[Item] list of shipment items insured_amount float Insured amount [optional] total_items int Number of items [optional] packaging_type str shipment packaging type default: 'BOX' [optional] [default to 'BOX'] is_document bool Document only shipment flag. (Non dutiable for international shipping) [optional] currency str General shipment values currency [optional] total_weight float Total shipment weight [optional] weight_unit str General package weight unit. Supported Units: \\\"LB\\\" (Pound), \\\"KG\\\" (Kilogram) default: 'KG' [optional] [default to 'KG'] dimension_unit str General package dimensions unit. Supported Units: \\\"IN\\\" (Inch), \\\"CM\\\" (Centimeter) default: 'CM' [optional] [default to 'CM'] paid_by str Shipment paid by. Values: \\\"SENDER\\\", \\\"THIRD_PARTY\\\", \\\"RECIPIENT\\\" [optional] payment_country_code str Payment country code [optional] payment_account_number str Shipment payment account number [optional] services list[str] Shipment services (check carriers services docs) [optional] options list[str] Additional shipment options (check docs) [optional] date str Shipment date [optional] payment_type str Payment type: account_number, credit_card [optional] duty_paid_by str Shipment paid by. Values: \\\"SENDER\\\", \\\"THIRD_PARTY\\\", \\\"RECIPIENT\\\" default: 'SENDER' [optional] [default to 'SENDER'] duty_payment_account str Duty payer account number [optional] declared_value float Shipment total value [optional] customs Customs [optional] references list[str] Shipment references. Ex: order number, platform reference... [optional] label Label [optional] invoice Invoice [optional] ship_date str Expected shipment date (supported by certain carriers) [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional] Item Name Type Description Notes id str item id [optional] weight float item weight width float item width [optional] height float item height [optional] length float item lenght [optional] packaging_type str item packaging type default: 'BOX' [optional] [default to 'BOX'] description str item description [optional] content str item content details [optional] quantity int item quantity [optional] sku str item SKU [optional] code str item code (supported by few carriers) [optional] value_amount float item value [optional] value_currency str item value currency [optional] origin_country str item origin country (check the docs) [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional] Customs Name Type Description Notes description str shipment description [optional] terms_of_trade str Terms of trades (check the docs) [optional] no_eei str NOEEI type of the shipment. [optional] aes str AES / ITN reference of the shipment. [optional] items list[Item] list of items for customs commercial_invoice bool Specify if shipment is commercial [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional] Label Name Type Description Notes format str label format [optional] type str label type [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional] Invoice Name Type Description Notes date str invoice date [optional] identifier str invoice identifier [optional] type str invoice type [optional] copies int Number of copies [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional]","title":"Rating"},{"location":"basic/rating/#rating-quotes","text":"Use a proxy, and it's mapper to get a carrier quote. from purplship.domain.Types import ( Party , Item , Shipment , RateRequest ) # Request data shipper = Party ( postal_code = \"H3N1S4\" , country_code = \"CA\" ) recipient = Party ( city = \"Lome\" , country_code = \"TG\" ) shipment_details = Shipment ( items = [ Item ( id = \"1\" , height = 3 , lenght = 10 , width = 3 , weight = 4.0 ) ] ) # create a domain quote payload entity from the json data # this operation will also validate the data rate_request = RateRequest ( shipper = shipper , recipient = recipient , shipment_details = shipment_details ) # create a carrier specific quote request object from the rate payload dhl_rate_request = proxy . mapper . create_quote_request ( rate_request ) # send a quote request to the carrier servers using the proxy response = proxy . get_quotes ( dhl_rate_request ) # extract the domain quote entity from the carrier quote response quotes = proxy . mapper . parse_quote_response ( response ) print ( jsonify ( quotes )) # --> ''' [ [ { \"base_charge\": 230.49, \"carrier\": \"carrier\", \"discount\": 0.0, \"duties_and_taxes\": 0.0, \"extra_charges\": [ { \"name\": \"FUEL\", \"value\": 9.22 } ], \"service_name\": \"INTERNATIONAL_PRIORITY\", \"service_type\": \"PAYOR_ACCOUNT_SHIPMENT\", \"total_charge\": 239.71 }, { \"base_charge\": 207.47, \"carrier\": \"carrier\", \"discount\": 0.0, \"duties_and_taxes\": 0.0, \"extra_charges\": [ { \"name\": \"FUEL\", \"value\": 8.3 } ], \"service_name\": \"INTERNATIONAL_ECONOMY\", \"service_type\": \"PAYOR_ACCOUNT_SHIPMENT\", \"total_charge\": 215.77 } ], [] ] '''","title":"Rating (Quotes)"},{"location":"basic/rating/#datatypes","text":"","title":"Datatypes"},{"location":"basic/rating/#raterequest","text":"Name Type Description Notes shipper Party recipient Party shipment Shipment","title":"RateRequest"},{"location":"basic/rating/#party","text":"Name Type Description Notes postal_code str postal code [optional] city str city [optional] type str type (supported by certain carriers) [optional] tax_id str Tax Identification Number [optional] person_name str Attention Name [optional] company_name str Company Name [optional] country_name str Country Name [optional] country_code str Country Code [optional] phone_number str Phone Number [optional] email_address str Email Address [optional] state str Province or State name [optional] state_code str Province or State code [optional] address_lines list[str] Address lines [optional] account_number str Account Number [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional]","title":"Party"},{"location":"basic/rating/#shipment","text":"Name Type Description Notes items list[Item] list of shipment items insured_amount float Insured amount [optional] total_items int Number of items [optional] packaging_type str shipment packaging type default: 'BOX' [optional] [default to 'BOX'] is_document bool Document only shipment flag. (Non dutiable for international shipping) [optional] currency str General shipment values currency [optional] total_weight float Total shipment weight [optional] weight_unit str General package weight unit. Supported Units: \\\"LB\\\" (Pound), \\\"KG\\\" (Kilogram) default: 'KG' [optional] [default to 'KG'] dimension_unit str General package dimensions unit. Supported Units: \\\"IN\\\" (Inch), \\\"CM\\\" (Centimeter) default: 'CM' [optional] [default to 'CM'] paid_by str Shipment paid by. Values: \\\"SENDER\\\", \\\"THIRD_PARTY\\\", \\\"RECIPIENT\\\" [optional] payment_country_code str Payment country code [optional] payment_account_number str Shipment payment account number [optional] services list[str] Shipment services (check carriers services docs) [optional] options list[str] Additional shipment options (check docs) [optional] date str Shipment date [optional] payment_type str Payment type: account_number, credit_card [optional] duty_paid_by str Shipment paid by. Values: \\\"SENDER\\\", \\\"THIRD_PARTY\\\", \\\"RECIPIENT\\\" default: 'SENDER' [optional] [default to 'SENDER'] duty_payment_account str Duty payer account number [optional] declared_value float Shipment total value [optional] customs Customs [optional] references list[str] Shipment references. Ex: order number, platform reference... [optional] label Label [optional] invoice Invoice [optional] ship_date str Expected shipment date (supported by certain carriers) [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional]","title":"Shipment"},{"location":"basic/rating/#item","text":"Name Type Description Notes id str item id [optional] weight float item weight width float item width [optional] height float item height [optional] length float item lenght [optional] packaging_type str item packaging type default: 'BOX' [optional] [default to 'BOX'] description str item description [optional] content str item content details [optional] quantity int item quantity [optional] sku str item SKU [optional] code str item code (supported by few carriers) [optional] value_amount float item value [optional] value_currency str item value currency [optional] origin_country str item origin country (check the docs) [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional]","title":"Item"},{"location":"basic/rating/#customs","text":"Name Type Description Notes description str shipment description [optional] terms_of_trade str Terms of trades (check the docs) [optional] no_eei str NOEEI type of the shipment. [optional] aes str AES / ITN reference of the shipment. [optional] items list[Item] list of items for customs commercial_invoice bool Specify if shipment is commercial [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional]","title":"Customs"},{"location":"basic/rating/#label","text":"Name Type Description Notes format str label format [optional] type str label type [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional]","title":"Label"},{"location":"basic/rating/#invoice","text":"Name Type Description Notes date str invoice date [optional] identifier str invoice identifier [optional] type str invoice type [optional] copies int Number of copies [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional]","title":"Invoice"},{"location":"basic/shipping/","text":"Shipping Use a proxy and, it's mapper to create a shipment. from purplship.domain.Types import ( ShipmentRequest , Shipment , Party , Customs , Item ) # JSON data shipper = Party ( company_name = \"shipper company privated limited 12\" , address_lines = [ \"238 850925434 Drive\" ], city = \"Scottsdale\" , postal_code = \"85260\" , country_code = \"US\" , person_name = \"Ms Lucian\" , phone_number = \"1 23 8613402\" , email_address = \"test@email.com\" , region = \"Arizona\" , region_code = \"AZ\" , extra = { \"ShipperID\" : \"123456789\" , \"RegisteredAccount\" : \"123456789\" , \"PhoneExtension\" : \"3403\" , \"FaxNumber\" : \"1 905 8613411\" , \"Telex\" : \"1245\" } ) recipient = Party ( company_name = \"IBM Bruse Pte Ltd\" , address_lines = [ \"9 Business Park Central 1\" , \"3th Floor\" , \"The IBM Place\" ], city = \"Brussels\" , postal_code = \"1060\" , country_code = \"BE\" , person_name = \"Mrs Orlander\" , phone_number = \"506-851-2271\" , email_address = \"c_orlander@gc.ca\" , extra = { \"PhoneExtension\" : \"7862\" , \"FaxNumber\" : \"506-851-7403\" , \"Telex\" : \"506-851-7121\" } ) shipment = Shipment ( packages = [ Item ( height = 3 , length = 10 , width = 3 , weight = 4.0 , packaging_type = \"EE\" ) ], is_document = False , shipper_account_number = \"123456789\" , paid_by = \"S\" , payment_account_number = \"123456789\" , duty_paid_by = \"S\" , duty_payment_account = \"123456789\" , declared_value = 200.00 , services = [ \"WY\" ], extra = { \"EProcShip\" : \"N\" , \"GlobalProductCode\" : \"P\" , \"LocalProductCode\" : \"P\" }, customs = Customs ( terms_of_trade = \"DAP\" , extra = { \"ScheduleB\" : \"3002905110\" , \"ExportLicense\" : \"D123456\" , \"ShipperEIN\" : \"112233445566\" , \"ShipperIDType\" : \"S\" , \"ImportLicense\" : \"ImportLic\" , \"ConsigneeEIN\" : \"ConEIN2123\" } ) ) # create a domain shipping payload entity from the json data # this operation will also validate the data shipping_payload = ShipmentRequest ( shipper = shipper , recipient = recipient , shipment = shipment ) # get a carrier shipping request xml object from the quote payload shipping_request = proxy . mapper . create_shipment_request ( shipping_payload ) # send a shipping request to the carrier servers using the proxy response = proxy . create_shipping ( shipping_request ) # extract the domain shipping entity from the carrier shipping response shipping = proxy . mapper . parse_shipping_response ( response ) print ( jsonify ( shipping )) # --> ''' [ { 'carrier': 'carrier_name', 'documents': [ 'iVBORw0KGgoAAAANSUhEUgAAAYwAAABeAQMAAAAKdrGZAAAABlBMVEX///8AAABVwtN+AAAAaklEQVR42mNkYGBIyL8w5a9P7YJXKU8ZgkU2V81cNmWt5IIokaMMX40+N6zsivI+93bZRDMx13vzlRYwMDAxkAxGtYxqGdUyqmVUy6iWUS2jWka1jGoZ1TKqZVTLqJZRLaNaRrWMaiEVAAB3uBe8nSip8QAAAABJRU5ErkJggg==', 'iVBORw0KGgoAAAANSUhEUgAAAZYAAABeAQMAAAA6+qC4AAAABlBMVEX///8AAABVwtN+AAAAZ0lEQVR42u3LIRJAUBRA0Ufwk6IY0eqMLBnBS/yi6Gb8XdiBPRBoZE1iDZpwTz+eiJRhNey2qNNZjUZnMMaLmzVR6W5TNfGaNe46Wp3kybfeivjyHYfD4XA4HA6Hw+FwOBwOh/On8wLTGBe8mbtkhgAAAABJRU5ErkJggg==', ], 'reference': { 'type': 'St', 'value': 'reference' }, 'service': 'EXPRESS WORLDWIDE', 'shipment_date': '2017-11-10', 'total_charge': { 'amount': '155.160', 'currency': 'USD', 'name': 'Shipment charge' }, 'tracking_number': '0044650491' }, [] ] ''' Datatypes ShipmentRequest Name Type Description Notes shipper Party recipient Party shipment Shipment Party Name Type Description Notes postal_code str postal code [optional] city str city [optional] type str type (supported by certain carriers) [optional] tax_id str Tax Identification Number [optional] person_name str Attention Name [optional] company_name str Company Name [optional] country_name str Country Name [optional] country_code str Country Code [optional] phone_number str Phone Number [optional] email_address str Email Address [optional] state str Province or State name [optional] state_code str Province or State code [optional] address_lines list[str] Address lines [optional] account_number str Account Number [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional] Shipment Name Type Description Notes items list[Item] list of shipment items insured_amount float Insured amount [optional] total_items int Number of items [optional] packaging_type str shipment packaging type default: 'BOX' [optional] [default to 'BOX'] is_document bool Document only shipment flag. (Non dutiable for international shipping) [optional] currency str General shipment values currency [optional] total_weight float Total shipment weight [optional] weight_unit str General package weight unit. Supported Units: \\\"LB\\\" (Pound), \\\"KG\\\" (Kilogram) default: 'KG' [optional] [default to 'KG'] dimension_unit str General package dimensions unit. Supported Units: \\\"IN\\\" (Inch), \\\"CM\\\" (Centimeter) default: 'CM' [optional] [default to 'CM'] paid_by str Shipment paid by. Values: \\\"SENDER\\\", \\\"THIRD_PARTY\\\", \\\"RECIPIENT\\\" [optional] payment_country_code str Payment country code [optional] payment_account_number str Shipment payment account number [optional] services list[str] Shipment services (check carriers services docs) [optional] options list[str] Additional shipment options (check docs) [optional] date str Shipment date [optional] payment_type str Payment type: account_number, credit_card [optional] duty_paid_by str Shipment paid by. Values: \\\"SENDER\\\", \\\"THIRD_PARTY\\\", \\\"RECIPIENT\\\" default: 'SENDER' [optional] [default to 'SENDER'] duty_payment_account str Duty payer account number [optional] declared_value float Shipment total value [optional] customs Customs [optional] references list[str] Shipment references. Ex: order number, platform reference... [optional] label Label [optional] invoice Invoice [optional] ship_date str Expected shipment date (supported by certain carriers) [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional] Item Name Type Description Notes id str item id [optional] weight float item weight width float item width [optional] height float item height [optional] length float item lenght [optional] packaging_type str item packaging type default: 'BOX' [optional] [default to 'BOX'] description str item description [optional] content str item content details [optional] quantity int item quantity [optional] sku str item SKU [optional] code str item code (supported by few carriers) [optional] value_amount float item value [optional] value_currency str item value currency [optional] origin_country str item origin country (check the docs) [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional] Customs Name Type Description Notes description str shipment description [optional] terms_of_trade str Terms of trades (check the docs) [optional] no_eei str NOEEI type of the shipment. [optional] aes str AES / ITN reference of the shipment. [optional] items list[Item] list of items for customs commercial_invoice bool Specify if shipment is commercial [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional] Label Name Type Description Notes format str label format [optional] type str label type [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional] Invoice Name Type Description Notes date str invoice date [optional] identifier str invoice identifier [optional] type str invoice type [optional] copies int Number of copies [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional]","title":"Shipping"},{"location":"basic/shipping/#shipping","text":"Use a proxy and, it's mapper to create a shipment. from purplship.domain.Types import ( ShipmentRequest , Shipment , Party , Customs , Item ) # JSON data shipper = Party ( company_name = \"shipper company privated limited 12\" , address_lines = [ \"238 850925434 Drive\" ], city = \"Scottsdale\" , postal_code = \"85260\" , country_code = \"US\" , person_name = \"Ms Lucian\" , phone_number = \"1 23 8613402\" , email_address = \"test@email.com\" , region = \"Arizona\" , region_code = \"AZ\" , extra = { \"ShipperID\" : \"123456789\" , \"RegisteredAccount\" : \"123456789\" , \"PhoneExtension\" : \"3403\" , \"FaxNumber\" : \"1 905 8613411\" , \"Telex\" : \"1245\" } ) recipient = Party ( company_name = \"IBM Bruse Pte Ltd\" , address_lines = [ \"9 Business Park Central 1\" , \"3th Floor\" , \"The IBM Place\" ], city = \"Brussels\" , postal_code = \"1060\" , country_code = \"BE\" , person_name = \"Mrs Orlander\" , phone_number = \"506-851-2271\" , email_address = \"c_orlander@gc.ca\" , extra = { \"PhoneExtension\" : \"7862\" , \"FaxNumber\" : \"506-851-7403\" , \"Telex\" : \"506-851-7121\" } ) shipment = Shipment ( packages = [ Item ( height = 3 , length = 10 , width = 3 , weight = 4.0 , packaging_type = \"EE\" ) ], is_document = False , shipper_account_number = \"123456789\" , paid_by = \"S\" , payment_account_number = \"123456789\" , duty_paid_by = \"S\" , duty_payment_account = \"123456789\" , declared_value = 200.00 , services = [ \"WY\" ], extra = { \"EProcShip\" : \"N\" , \"GlobalProductCode\" : \"P\" , \"LocalProductCode\" : \"P\" }, customs = Customs ( terms_of_trade = \"DAP\" , extra = { \"ScheduleB\" : \"3002905110\" , \"ExportLicense\" : \"D123456\" , \"ShipperEIN\" : \"112233445566\" , \"ShipperIDType\" : \"S\" , \"ImportLicense\" : \"ImportLic\" , \"ConsigneeEIN\" : \"ConEIN2123\" } ) ) # create a domain shipping payload entity from the json data # this operation will also validate the data shipping_payload = ShipmentRequest ( shipper = shipper , recipient = recipient , shipment = shipment ) # get a carrier shipping request xml object from the quote payload shipping_request = proxy . mapper . create_shipment_request ( shipping_payload ) # send a shipping request to the carrier servers using the proxy response = proxy . create_shipping ( shipping_request ) # extract the domain shipping entity from the carrier shipping response shipping = proxy . mapper . parse_shipping_response ( response ) print ( jsonify ( shipping )) # --> ''' [ { 'carrier': 'carrier_name', 'documents': [ 'iVBORw0KGgoAAAANSUhEUgAAAYwAAABeAQMAAAAKdrGZAAAABlBMVEX///8AAABVwtN+AAAAaklEQVR42mNkYGBIyL8w5a9P7YJXKU8ZgkU2V81cNmWt5IIokaMMX40+N6zsivI+93bZRDMx13vzlRYwMDAxkAxGtYxqGdUyqmVUy6iWUS2jWka1jGoZ1TKqZVTLqJZRLaNaRrWMaiEVAAB3uBe8nSip8QAAAABJRU5ErkJggg==', 'iVBORw0KGgoAAAANSUhEUgAAAZYAAABeAQMAAAA6+qC4AAAABlBMVEX///8AAABVwtN+AAAAZ0lEQVR42u3LIRJAUBRA0Ufwk6IY0eqMLBnBS/yi6Gb8XdiBPRBoZE1iDZpwTz+eiJRhNey2qNNZjUZnMMaLmzVR6W5TNfGaNe46Wp3kybfeivjyHYfD4XA4HA6Hw+FwOBwOh/On8wLTGBe8mbtkhgAAAABJRU5ErkJggg==', ], 'reference': { 'type': 'St', 'value': 'reference' }, 'service': 'EXPRESS WORLDWIDE', 'shipment_date': '2017-11-10', 'total_charge': { 'amount': '155.160', 'currency': 'USD', 'name': 'Shipment charge' }, 'tracking_number': '0044650491' }, [] ] '''","title":"Shipping"},{"location":"basic/shipping/#datatypes","text":"","title":"Datatypes"},{"location":"basic/shipping/#shipmentrequest","text":"Name Type Description Notes shipper Party recipient Party shipment Shipment","title":"ShipmentRequest"},{"location":"basic/shipping/#party","text":"Name Type Description Notes postal_code str postal code [optional] city str city [optional] type str type (supported by certain carriers) [optional] tax_id str Tax Identification Number [optional] person_name str Attention Name [optional] company_name str Company Name [optional] country_name str Country Name [optional] country_code str Country Code [optional] phone_number str Phone Number [optional] email_address str Email Address [optional] state str Province or State name [optional] state_code str Province or State code [optional] address_lines list[str] Address lines [optional] account_number str Account Number [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional]","title":"Party"},{"location":"basic/shipping/#shipment","text":"Name Type Description Notes items list[Item] list of shipment items insured_amount float Insured amount [optional] total_items int Number of items [optional] packaging_type str shipment packaging type default: 'BOX' [optional] [default to 'BOX'] is_document bool Document only shipment flag. (Non dutiable for international shipping) [optional] currency str General shipment values currency [optional] total_weight float Total shipment weight [optional] weight_unit str General package weight unit. Supported Units: \\\"LB\\\" (Pound), \\\"KG\\\" (Kilogram) default: 'KG' [optional] [default to 'KG'] dimension_unit str General package dimensions unit. Supported Units: \\\"IN\\\" (Inch), \\\"CM\\\" (Centimeter) default: 'CM' [optional] [default to 'CM'] paid_by str Shipment paid by. Values: \\\"SENDER\\\", \\\"THIRD_PARTY\\\", \\\"RECIPIENT\\\" [optional] payment_country_code str Payment country code [optional] payment_account_number str Shipment payment account number [optional] services list[str] Shipment services (check carriers services docs) [optional] options list[str] Additional shipment options (check docs) [optional] date str Shipment date [optional] payment_type str Payment type: account_number, credit_card [optional] duty_paid_by str Shipment paid by. Values: \\\"SENDER\\\", \\\"THIRD_PARTY\\\", \\\"RECIPIENT\\\" default: 'SENDER' [optional] [default to 'SENDER'] duty_payment_account str Duty payer account number [optional] declared_value float Shipment total value [optional] customs Customs [optional] references list[str] Shipment references. Ex: order number, platform reference... [optional] label Label [optional] invoice Invoice [optional] ship_date str Expected shipment date (supported by certain carriers) [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional]","title":"Shipment"},{"location":"basic/shipping/#item","text":"Name Type Description Notes id str item id [optional] weight float item weight width float item width [optional] height float item height [optional] length float item lenght [optional] packaging_type str item packaging type default: 'BOX' [optional] [default to 'BOX'] description str item description [optional] content str item content details [optional] quantity int item quantity [optional] sku str item SKU [optional] code str item code (supported by few carriers) [optional] value_amount float item value [optional] value_currency str item value currency [optional] origin_country str item origin country (check the docs) [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional]","title":"Item"},{"location":"basic/shipping/#customs","text":"Name Type Description Notes description str shipment description [optional] terms_of_trade str Terms of trades (check the docs) [optional] no_eei str NOEEI type of the shipment. [optional] aes str AES / ITN reference of the shipment. [optional] items list[Item] list of items for customs commercial_invoice bool Specify if shipment is commercial [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional]","title":"Customs"},{"location":"basic/shipping/#label","text":"Name Type Description Notes format str label format [optional] type str label type [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional]","title":"Label"},{"location":"basic/shipping/#invoice","text":"Name Type Description Notes date str invoice date [optional] identifier str invoice identifier [optional] type str invoice type [optional] copies int Number of copies [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional]","title":"Invoice"},{"location":"basic/tracking/","text":"Tracking Use a proxy, and it's mapper get trackings. from purplship.domain.Types import TrackingRequest # JSON data tracking_numbers = [ \"7740842550\" , \"1815115363\" ] # create a domain tracking payload entity from the json data # this operation will also validate the data tracking_payload = TrackingRequest ( tracking_numbers = tracking_numbers ) # get a carrier tracking request xml object from the tracking payload tracking_request = proxy . mapper . create_tracking_request ( tracking_payload ) # send a tracking request to the carrier servers using the proxy response = proxy . get_tracking ( tracking_request ) # extract the domain tracking entity from the carrier tracking response tracking = proxy . mapper . parse_tracking_response ( response ) print ( jsonify ( tracking )) # --> ''' [ [ { \"carrier\": \"carrier_name\", \"events\": [ { \"code\": \"PU\", \"date\": \"2009-08-26\", \"description\": \"Shipment picked up\", \"location\": \"Singapore - Singapore \", \"signatory\": \"\", \"time\": \"10:00:00\" } ], \"shipment_date\": \"2009-08-26 10:00:00\", \"tracking_number\": \"7740842550\" }, { \"carrier\": \"carrier_name\", \"events\": [ { \"code\": \"PU\", \"date\": \"2009-08-13\", \"description\": \"Shipment picked up\", \"location\": \"Hong Kong - Hong Kong \", \"signatory\": \"\", \"time\": \"23:58:00\" }, { \"code\": \"RW\", \"date\": \"2009-08-14\", \"description\": \"\", \"location\": \"Hong Kong - Hong Kong \", \"signatory\": \"21.20\", \"time\": \"02:19:50\" } ], \"shipment_date\": \"2009-08-13 23:58:00\", \"tracking_number\": \"1815115363\" } ], [] ] ''' Datatypes TrackingRequest Name Type Description Notes tracking_numbers list[str] List of tracking numbers language_code str Language code (supported by certain carriers) [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional]","title":"Tracking"},{"location":"basic/tracking/#tracking","text":"Use a proxy, and it's mapper get trackings. from purplship.domain.Types import TrackingRequest # JSON data tracking_numbers = [ \"7740842550\" , \"1815115363\" ] # create a domain tracking payload entity from the json data # this operation will also validate the data tracking_payload = TrackingRequest ( tracking_numbers = tracking_numbers ) # get a carrier tracking request xml object from the tracking payload tracking_request = proxy . mapper . create_tracking_request ( tracking_payload ) # send a tracking request to the carrier servers using the proxy response = proxy . get_tracking ( tracking_request ) # extract the domain tracking entity from the carrier tracking response tracking = proxy . mapper . parse_tracking_response ( response ) print ( jsonify ( tracking )) # --> ''' [ [ { \"carrier\": \"carrier_name\", \"events\": [ { \"code\": \"PU\", \"date\": \"2009-08-26\", \"description\": \"Shipment picked up\", \"location\": \"Singapore - Singapore \", \"signatory\": \"\", \"time\": \"10:00:00\" } ], \"shipment_date\": \"2009-08-26 10:00:00\", \"tracking_number\": \"7740842550\" }, { \"carrier\": \"carrier_name\", \"events\": [ { \"code\": \"PU\", \"date\": \"2009-08-13\", \"description\": \"Shipment picked up\", \"location\": \"Hong Kong - Hong Kong \", \"signatory\": \"\", \"time\": \"23:58:00\" }, { \"code\": \"RW\", \"date\": \"2009-08-14\", \"description\": \"\", \"location\": \"Hong Kong - Hong Kong \", \"signatory\": \"21.20\", \"time\": \"02:19:50\" } ], \"shipment_date\": \"2009-08-13 23:58:00\", \"tracking_number\": \"1815115363\" } ], [] ] '''","title":"Tracking"},{"location":"basic/tracking/#datatypes","text":"","title":"Datatypes"},{"location":"basic/tracking/#trackingrequest","text":"Name Type Description Notes tracking_numbers list[str] List of tracking numbers language_code str Language code (supported by certain carriers) [optional] extra dict(str, str) extra field for special details supported by a specific carriers [optional]","title":"TrackingRequest"},{"location":"carriers/aups/","text":"Australia Post Client Properties Name Type Description Notes api_key str password str [optional] account_number str [optional] carrier_name str [optional][default to \"AustraliaPost\"] api str [optional][default to \"Logistic\"] Getting Started Shipping and Tracking (Logistic) import purplship aups = purplship . gateway [ \"aups\" ] . create ( { \"api_key\" : \"username\" , \"password\" : \"password\" , \"account_number\" : \"1324913439840\" } ) Postage Assessment Calculator - PAC (Postage) aups = purplship . gateway [ \"aups\" ] . create ( { \"api_key\" : \"username\" , \"api\" : \"Postage\" } )","title":"Australia Post"},{"location":"carriers/aups/#australia-post","text":"","title":"Australia Post"},{"location":"carriers/aups/#client-properties","text":"Name Type Description Notes api_key str password str [optional] account_number str [optional] carrier_name str [optional][default to \"AustraliaPost\"] api str [optional][default to \"Logistic\"]","title":"Client Properties"},{"location":"carriers/aups/#getting-started","text":"","title":"Getting Started"},{"location":"carriers/aups/#shipping-and-tracking-logistic","text":"import purplship aups = purplship . gateway [ \"aups\" ] . create ( { \"api_key\" : \"username\" , \"password\" : \"password\" , \"account_number\" : \"1324913439840\" } )","title":"Shipping and Tracking (Logistic)"},{"location":"carriers/aups/#postage-assessment-calculator-pac-postage","text":"aups = purplship . gateway [ \"aups\" ] . create ( { \"api_key\" : \"username\" , \"api\" : \"Postage\" } )","title":"Postage Assessment Calculator - PAC (Postage)"},{"location":"carriers/caps/","text":"Canada Post Client Properties Name Type Description Notes username str password str custumer_number str carrier_name str [optional][default to \"CanadaPost\"] server_url str [optional][default to \" https://soagw.canadapost.ca \"] Getting Started import purplship caps = purplship . gateway [ \"caps\" ] . create ( { \"username\" : \"username\" , \"password\" : \"password\" , \"customer_number\" : \"1324913439840\" , } )","title":"Canada Post"},{"location":"carriers/caps/#canada-post","text":"","title":"Canada Post"},{"location":"carriers/caps/#client-properties","text":"Name Type Description Notes username str password str custumer_number str carrier_name str [optional][default to \"CanadaPost\"] server_url str [optional][default to \" https://soagw.canadapost.ca \"]","title":"Client Properties"},{"location":"carriers/caps/#getting-started","text":"import purplship caps = purplship . gateway [ \"caps\" ] . create ( { \"username\" : \"username\" , \"password\" : \"password\" , \"customer_number\" : \"1324913439840\" , } )","title":"Getting Started"},{"location":"carriers/dhl/","text":"DHL Client Properties Name Type Description Notes site_id str password str carrier_name str [optional][default to \"DHL\"] server_url str [optional][default to \" https://xmlpi-ea.dhl.com/XMLShippingServlet \"] Getting Started import purplship dhl = purplship . gateway [ \"dhl\" ] . create ( { \"site_id\" : \"site_id\" , \"password\" : \"password\" , } )","title":"DHL"},{"location":"carriers/dhl/#dhl","text":"","title":"DHL"},{"location":"carriers/dhl/#client-properties","text":"Name Type Description Notes site_id str password str carrier_name str [optional][default to \"DHL\"] server_url str [optional][default to \" https://xmlpi-ea.dhl.com/XMLShippingServlet \"]","title":"Client Properties"},{"location":"carriers/dhl/#getting-started","text":"import purplship dhl = purplship . gateway [ \"dhl\" ] . create ( { \"site_id\" : \"site_id\" , \"password\" : \"password\" , } )","title":"Getting Started"},{"location":"carriers/fedex/","text":"FedEx Client Properties Name Type Description Notes site_id str password str meter_number str account_number str carrier_name str [optional][default to \"FedEx\"] server_url str [optional][default to \" https://ws.fedex.com:443/web-services \"] Getting Started import purplship fedex = purplship . gateway [ \"fedex\" ] . create ( { \"user_key\" : \"username\" , \"password\" : \"password\" , \"meter_number\" : \"1324913439840\" , \"account_number\" : \"103948734\" , } )","title":"FedEx"},{"location":"carriers/fedex/#fedex","text":"","title":"FedEx"},{"location":"carriers/fedex/#client-properties","text":"Name Type Description Notes site_id str password str meter_number str account_number str carrier_name str [optional][default to \"FedEx\"] server_url str [optional][default to \" https://ws.fedex.com:443/web-services \"]","title":"Client Properties"},{"location":"carriers/fedex/#getting-started","text":"import purplship fedex = purplship . gateway [ \"fedex\" ] . create ( { \"user_key\" : \"username\" , \"password\" : \"password\" , \"meter_number\" : \"1324913439840\" , \"account_number\" : \"103948734\" , } )","title":"Getting Started"},{"location":"carriers/sendle/","text":"Sendle Client Properties Name Type Description Notes sendle_id str api_key str carrier_name str [optional][default to \"Sendle\"] server_url str [optional][default to \" https://ws.fedex.com:443/web-services \"] Getting Started import purplship sendle = purplship . gateway [ \"sendle\" ] . create ( { \"sendle_id\" : \"user@id\" , \"api_key\" : \"l56berylkghekrb527l5bk7575\" , } )","title":"Sendle"},{"location":"carriers/sendle/#sendle","text":"","title":"Sendle"},{"location":"carriers/sendle/#client-properties","text":"Name Type Description Notes sendle_id str api_key str carrier_name str [optional][default to \"Sendle\"] server_url str [optional][default to \" https://ws.fedex.com:443/web-services \"]","title":"Client Properties"},{"location":"carriers/sendle/#getting-started","text":"import purplship sendle = purplship . gateway [ \"sendle\" ] . create ( { \"sendle_id\" : \"user@id\" , \"api_key\" : \"l56berylkghekrb527l5bk7575\" , } )","title":"Getting Started"},{"location":"carriers/ups/","text":"UPS Client Properties Name Type Description Notes username str password str access_license_number str carrier_name str [optional][default to \"UPS\"] server_url str [optional][default to \" https://onlinetools.ups.com/webservices \"] Getting Started import purplship from purplship.mappers.ups import UPSClient ups = purplship . gateway [ \"ups\" ] . create ( UPSClient ( sendle_id = \"username\" , api_key = \"password\" , ) )","title":"UPS"},{"location":"carriers/ups/#ups","text":"","title":"UPS"},{"location":"carriers/ups/#client-properties","text":"Name Type Description Notes username str password str access_license_number str carrier_name str [optional][default to \"UPS\"] server_url str [optional][default to \" https://onlinetools.ups.com/webservices \"]","title":"Client Properties"},{"location":"carriers/ups/#getting-started","text":"import purplship from purplship.mappers.ups import UPSClient ups = purplship . gateway [ \"ups\" ] . create ( UPSClient ( sendle_id = \"username\" , api_key = \"password\" , ) )","title":"Getting Started"},{"location":"carriers/usps/","text":"USPS Client Properties Name Type Description Notes username str password str carrier_name str [optional][default to \"USPS\"] server_url str [optional][default to \" https://secure.shippingapis.com/ShippingAPI.dll \"] Getting Started import purplship from purplship.mappers.usps import USPSClient usps = purplship . gateway [ \"usps\" ] . create ( USPSClient ( sendle_id = \"username\" , api_key = \"password\" , ) )","title":"USPS"},{"location":"carriers/usps/#usps","text":"","title":"USPS"},{"location":"carriers/usps/#client-properties","text":"Name Type Description Notes username str password str carrier_name str [optional][default to \"USPS\"] server_url str [optional][default to \" https://secure.shippingapis.com/ShippingAPI.dll \"]","title":"Client Properties"},{"location":"carriers/usps/#getting-started","text":"import purplship from purplship.mappers.usps import USPSClient usps = purplship . gateway [ \"usps\" ] . create ( USPSClient ( sendle_id = \"username\" , api_key = \"password\" , ) )","title":"Getting Started"},{"location":"contributing/architecture/","text":"JSON In ... JSON out Abstractions Domain Client The client holds all data related to specific carrier API credentials and configurations from purplship.mappers.dhl import DHLClient dhlClient = DHLClient ( \"https://xmlpi-ea.dhl.com/XMLShippingServlet\" , \"YOUR_DHL_SITE_ID\" , \"YOUR_DHL_SITE_PASSWORD\" , \"YOUR_DHL_ACCOUNT_NUMBER\" , \"CARRIER_NAME\" # optional, will be DHL by default ) Proxy The proxy takes care of the communication with the specific carrier's open API Proxy Pattern from purplship.mappers.dhl import DHLProxy dhlProxy = DHLProxy ( dhlClient ) Or create a proxy with a custom mapper (If you extend or implement your own compatible Mapper). from purplship.mappers.dhl.dhl_mapper import DHLMapper dhlMapper = DHLMapper ( dhlClient ) customProxy = DHLProxy ( dhlClient , dhlMapper ) Mapper The mapper handles the conversion from PurplShip united API Data types to Carrier specific API Datatypes. Note: Here is the core of PurplShip extensibility and customizability. You can extend the default mapper or write your own. In most common cases the developer integrating a shipping carrier API has to write or extend mappers Data mapper Pattern Unified Data Models Defined by cross-referencing common data types among multiple carriers, the unified data types constitute an intuitive shared API interface. Explore the library API to know more about the type definitions.","title":"Architecture"},{"location":"contributing/architecture/#json-in-json-out","text":"","title":"JSON In ... JSON out"},{"location":"contributing/architecture/#abstractions","text":"","title":"Abstractions"},{"location":"contributing/architecture/#domain","text":"","title":"Domain"},{"location":"contributing/architecture/#client","text":"The client holds all data related to specific carrier API credentials and configurations from purplship.mappers.dhl import DHLClient dhlClient = DHLClient ( \"https://xmlpi-ea.dhl.com/XMLShippingServlet\" , \"YOUR_DHL_SITE_ID\" , \"YOUR_DHL_SITE_PASSWORD\" , \"YOUR_DHL_ACCOUNT_NUMBER\" , \"CARRIER_NAME\" # optional, will be DHL by default )","title":"Client"},{"location":"contributing/architecture/#proxy","text":"The proxy takes care of the communication with the specific carrier's open API Proxy Pattern from purplship.mappers.dhl import DHLProxy dhlProxy = DHLProxy ( dhlClient ) Or create a proxy with a custom mapper (If you extend or implement your own compatible Mapper). from purplship.mappers.dhl.dhl_mapper import DHLMapper dhlMapper = DHLMapper ( dhlClient ) customProxy = DHLProxy ( dhlClient , dhlMapper )","title":"Proxy"},{"location":"contributing/architecture/#mapper","text":"The mapper handles the conversion from PurplShip united API Data types to Carrier specific API Datatypes. Note: Here is the core of PurplShip extensibility and customizability. You can extend the default mapper or write your own. In most common cases the developer integrating a shipping carrier API has to write or extend mappers Data mapper Pattern","title":"Mapper"},{"location":"contributing/architecture/#unified-data-models","text":"Defined by cross-referencing common data types among multiple carriers, the unified data types constitute an intuitive shared API interface. Explore the library API to know more about the type definitions.","title":"Unified Data Models"}]}