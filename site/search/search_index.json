{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to PurplShip\n\n\n \n\n\nMission\n\n\nMost of the major shipping carriers offer the possibility to create in-house integrated solutions using their APIs.\nThat is quite convenient; however, the integration can be very costly regarding time and effort.\n\n\nPurplShip is an open source library with the mission of making such tasks as comfortable as possible for developers.\n\n\nThis library focuses on proposing a unified API, to fulfill the mission.\n\n\n\n\nIntegrate multiple carriers: DHL, FedEx, UPS, Canada Post and more with ease\n\n\nUse an intuitive, unified API across multiple carriers\n\n\nUse your developer credentials with negotiated rates\n\n\n\n\nPurplSHip prevents you from reinvinting the wheel and is easy to use:\n\n\n>>> from purplship.mappers.dhl import  DHLClient, DHLProxy\n>>> from purplship.domain.entities import Tracking\n>>> from gds_helpers import jsonify\n>>> \nclient\n \n=\n DHLClient\n(\n\n    \n\"https://xmlpi-ea.dhl.com/XMLShippingServlet\"\n,\n    \n\"YOUR_DHL_SITE_ID\"\n,\n    \n\"YOUR_DHL_SITE_PASSWORD\"\n,\n    \n\"YOUR_DHL_ACCOUNT_NUMBER\"\n,\n    \n\"CARRIER_NAME\"\n\n  \n)\n\n>>> \nproxy\n \n=\n DHLProxy\n(\nclient\n)\n\n>>> \ntracking_payload\n \n=\n Tracking.create\n(\ntracking_numbers\n=[\n\"8346088391\"\n])\n\n>>> \ntracking_request\n \n=\n proxy.mapper.create_tracking_request\n(\ntracking_payload\n)\n\n>>> \nresponse\n \n=\n proxy.get_trackings\n(\ntracking_request\n)\n\n>>> \ntrackings\n \n=\n proxy.mapper.parse_tracking_response\n(\nresponse\n)\n\n>>> print\n(\njsonify\n(\ntrackings\n))\n\n\n'''\n\n\n[\n\n\n    [\n\n\n        {\n\n\n            \"carrier\": \"DHL\",\n\n\n            \"events\": [\n\n\n                {\n\n\n                    \"code\": \"PU\",\n\n\n                    \"date\": \"2009-08-13\",\n\n\n                    \"description\": \"Shipment picked up\",\n\n\n                    \"location\": \"Hong Kong - Hong Kong \",\n\n\n                    \"signatory\": \"\",\n\n\n                    \"time\": \"23:58:00\"\n\n\n                },\n\n\n                {\n\n\n                    \"code\": \"RW\",\n\n\n                    \"date\": \"2009-08-14\",\n\n\n                    \"description\": \"\",\n\n\n                    \"location\": \"Hong Kong - Hong Kong \",\n\n\n                    \"signatory\": \"21.20\",\n\n\n                    \"time\": \"02:19:50\"\n\n\n                }\n\n\n            ],\n\n\n            \"shipment_date\": \"2009-08-13 23:58:00\",\n\n\n            \"tracking_number\": \"8346088391\"\n\n\n        }\n\n\n    ],\n\n\n    []\n\n\n]\n\n\n'''\n\n\n\n\n\n\nNavigation\n\n\n\n\nArchitecture\n\n\nRoadmap\n\n\nFeatures\n\n\nQuote\n\n\nTracking\n\n\nShipping\n\n\nPickup\n\n\n\n\n\n\n\n\nPrerequisites\n\n\nPurplShip is compatible with Python 3 +\n\n\nInstalling\n\n\nPurplShip can be installed with \npip\n:\n\n\nFor latest dev versions\n\n\npip install --process-dependency-links -e git://github.com/PurplShip/purplship.git#egg\n=\npurplship    \n\n\n\n\n\nAlternatively, you can grab the latest source code from \nGitHub\n:\n\n\ngit clone https://github.com/PurplShip/purplship.git\npip install --process-dependency-links -e purplship   \n\n\n\n\n\nFor released version (specify a purplship==version if needed)\n\n\npip install -f https://git.io/fxTZ6 purplship   \n\n\n\n\n\nLicense\n\n\nThis project is licensed under the LGPL License - see the \nLICENSE.md\n file for details\n\n\nContributing\n\n\nWe happily welcome contributions, please see \nCONTRIBUTING.md\n for details.",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-purplship",
            "text": "",
            "title": "Welcome to PurplShip"
        },
        {
            "location": "/#mission",
            "text": "Most of the major shipping carriers offer the possibility to create in-house integrated solutions using their APIs.\nThat is quite convenient; however, the integration can be very costly regarding time and effort.  PurplShip is an open source library with the mission of making such tasks as comfortable as possible for developers.  This library focuses on proposing a unified API, to fulfill the mission.   Integrate multiple carriers: DHL, FedEx, UPS, Canada Post and more with ease  Use an intuitive, unified API across multiple carriers  Use your developer credentials with negotiated rates   PurplSHip prevents you from reinvinting the wheel and is easy to use:  >>> from purplship.mappers.dhl import  DHLClient, DHLProxy\n>>> from purplship.domain.entities import Tracking\n>>> from gds_helpers import jsonify\n>>>  client   =  DHLClient ( \n     \"https://xmlpi-ea.dhl.com/XMLShippingServlet\" ,\n     \"YOUR_DHL_SITE_ID\" ,\n     \"YOUR_DHL_SITE_PASSWORD\" ,\n     \"YOUR_DHL_ACCOUNT_NUMBER\" ,\n     \"CARRIER_NAME\" \n   ) \n>>>  proxy   =  DHLProxy ( client ) \n>>>  tracking_payload   =  Tracking.create ( tracking_numbers =[ \"8346088391\" ]) \n>>>  tracking_request   =  proxy.mapper.create_tracking_request ( tracking_payload ) \n>>>  response   =  proxy.get_trackings ( tracking_request ) \n>>>  trackings   =  proxy.mapper.parse_tracking_response ( response ) \n>>> print ( jsonify ( trackings ))  '''  [      [          {              \"carrier\": \"DHL\",              \"events\": [                  {                      \"code\": \"PU\",                      \"date\": \"2009-08-13\",                      \"description\": \"Shipment picked up\",                      \"location\": \"Hong Kong - Hong Kong \",                      \"signatory\": \"\",                      \"time\": \"23:58:00\"                  },                  {                      \"code\": \"RW\",                      \"date\": \"2009-08-14\",                      \"description\": \"\",                      \"location\": \"Hong Kong - Hong Kong \",                      \"signatory\": \"21.20\",                      \"time\": \"02:19:50\"                  }              ],              \"shipment_date\": \"2009-08-13 23:58:00\",              \"tracking_number\": \"8346088391\"          }      ],      []  ]  '''",
            "title": "Mission"
        },
        {
            "location": "/#navigation",
            "text": "Architecture  Roadmap  Features  Quote  Tracking  Shipping  Pickup",
            "title": "Navigation"
        },
        {
            "location": "/#prerequisites",
            "text": "PurplShip is compatible with Python 3 +",
            "title": "Prerequisites"
        },
        {
            "location": "/#installing",
            "text": "PurplShip can be installed with  pip :  For latest dev versions  pip install --process-dependency-links -e git://github.com/PurplShip/purplship.git#egg = purplship      Alternatively, you can grab the latest source code from  GitHub :  git clone https://github.com/PurplShip/purplship.git\npip install --process-dependency-links -e purplship     For released version (specify a purplship==version if needed)  pip install -f https://git.io/fxTZ6 purplship",
            "title": "Installing"
        },
        {
            "location": "/#license",
            "text": "This project is licensed under the LGPL License - see the  LICENSE.md  file for details",
            "title": "License"
        },
        {
            "location": "/#contributing",
            "text": "We happily welcome contributions, please see  CONTRIBUTING.md  for details.",
            "title": "Contributing"
        },
        {
            "location": "/architecture/",
            "text": "JSON In ... JSON out\n\n\n\n\nAbstractions\n\n\n\n\nDomain\n\n\n\n\nClient\n\n\nThe client holds all data related to specific carrier API credentials and configurations\n\n\n\n\n\n\n\n\nUPSClient\n(\n\n  \nserver_url\n=\n\"https://wwwcie.ups.com/webservices\"\n,\n\n  \nusername\n=\n\"username\"\n,\n\n  \npassword\n=\n\"password\"\n,\n\n  \naccount_number\n=\n\"56GJE\"\n,\n\n  \naccess_license_number\n=\n\"FG09H9G8H09GH8G0\"\n\n\n)\n\n\n\n\n\n\n\n\n\n\nMapper\n\n\n\n\nThe mapper handles the conversion from PurplShip united API Data types to Carrier specific API Datatypes.\n\n\nNote: Here is the core of PurplShip extensibility and customizability. You can extend the default mapper or write your own.\n\n\nIn most common cases the developer integrating a shipping carrier API has to write or extend mappers\n\nData mapper Pattern\n\n\n\n\n\n\n\n\n\n\nProxy\n\n\n\n\nThe proxy takes care of the communication with the specific carrier's open API\n\nProxy Pattern\n\n\n\n\n\n\n\n\nUnified Data Types\n\n\n\n\nDefined by cross-referencing common data types among multiple carriers, the unified data types constitute an intuitive shared API interface.\n\n\n\n\n\n\n\n\nExplore the library \nreference\n to know more about the type definitions.",
            "title": "Architecture"
        },
        {
            "location": "/architecture/#json-in-json-out",
            "text": "",
            "title": "JSON In ... JSON out"
        },
        {
            "location": "/architecture/#abstractions",
            "text": "",
            "title": "Abstractions"
        },
        {
            "location": "/architecture/#domain",
            "text": "Client  The client holds all data related to specific carrier API credentials and configurations     UPSClient ( \n   server_url = \"https://wwwcie.ups.com/webservices\" , \n   username = \"username\" , \n   password = \"password\" , \n   account_number = \"56GJE\" , \n   access_license_number = \"FG09H9G8H09GH8G0\"  )     Mapper   The mapper handles the conversion from PurplShip united API Data types to Carrier specific API Datatypes.  Note: Here is the core of PurplShip extensibility and customizability. You can extend the default mapper or write your own.  In most common cases the developer integrating a shipping carrier API has to write or extend mappers Data mapper Pattern      Proxy   The proxy takes care of the communication with the specific carrier's open API Proxy Pattern     Unified Data Types   Defined by cross-referencing common data types among multiple carriers, the unified data types constitute an intuitive shared API interface.     Explore the library  reference  to know more about the type definitions.",
            "title": "Domain"
        },
        {
            "location": "/proxy/",
            "text": "DHL\n\n\nClient\n\n\nConfigure your carrier client using your credential\n\n\nfrom\n \npurplship.mappers.dhl\n \nimport\n  \nDHLClient\n\n\n\ndhlClient\n \n=\n \nDHLClient\n(\n\n  \n\"https://xmlpi-ea.dhl.com/XMLShippingServlet\"\n,\n\n  \n\"YOUR_DHL_SITE_ID\"\n,\n\n  \n\"YOUR_DHL_SITE_PASSWORD\"\n,\n\n  \n\"YOUR_DHL_ACCOUNT_NUMBER\"\n,\n\n  \n\"CARRIER_NAME\"\n              \n# optional, will be DHL by default\n\n\n)\n\n\n\n\n\n\nProxy\n\n\nUse the default proxy by providing your client\n\n\nfrom\n \npurplship.mappers.dhl\n \nimport\n \nDHLProxy\n\n\n\ndhlProxy\n \n=\n \nDHLProxy\n(\ndhlClient\n)\n\n\n\n\n\n\nOr create a proxy with a custom mapper (If you extend or implement your own compatible Mapper).\n\n\nfrom\n \npurplship.mappers.dhl.dhl_mapper\n \nimport\n \nDHLMapper\n\n\n\ndhlMapper\n \n=\n \nDHLMapper\n(\ndhlClient\n)\n\n\ncustomProxy\n \n=\n \nDHLProxy\n(\ndhlClient\n,\n \ndhlMapper\n)",
            "title": "Proxy"
        },
        {
            "location": "/proxy/#dhl",
            "text": "",
            "title": "DHL"
        },
        {
            "location": "/proxy/#client",
            "text": "Configure your carrier client using your credential  from   purplship.mappers.dhl   import    DHLClient  dhlClient   =   DHLClient ( \n   \"https://xmlpi-ea.dhl.com/XMLShippingServlet\" , \n   \"YOUR_DHL_SITE_ID\" , \n   \"YOUR_DHL_SITE_PASSWORD\" , \n   \"YOUR_DHL_ACCOUNT_NUMBER\" , \n   \"CARRIER_NAME\"                # optional, will be DHL by default  )",
            "title": "Client"
        },
        {
            "location": "/proxy/#proxy",
            "text": "Use the default proxy by providing your client  from   purplship.mappers.dhl   import   DHLProxy  dhlProxy   =   DHLProxy ( dhlClient )   Or create a proxy with a custom mapper (If you extend or implement your own compatible Mapper).  from   purplship.mappers.dhl.dhl_mapper   import   DHLMapper  dhlMapper   =   DHLMapper ( dhlClient )  customProxy   =   DHLProxy ( dhlClient ,   dhlMapper )",
            "title": "Proxy"
        },
        {
            "location": "/quote/",
            "text": "Quotes (Rate)\n\n\nUse a proxy, and it's mapper to get a carrier quote.\n\n\nfrom\n \npurplship.domain.entities\n \nimport\n \nQuote\n\n\nfrom\n \ngds_helpers\n \nimport\n \njsonify\n\n\n\n# JSON data\n\n\n\nshipper\n \n=\n \n{\n\"address\"\n:\n \n{\n\"postal_code\"\n:\n\"H3N1S4\"\n,\n \n\"country_code\"\n:\n\"CA\"\n}}\n\n\nrecipient\n \n=\n \n{\n\"address\"\n:\n \n{\n\"city\"\n:\n\"Lome\"\n,\n \n\"country_code\"\n:\n\"TG\"\n}}\n\n\nshipment_details\n \n=\n \n{\n\"packages\"\n:\n \n[{\n\"id\"\n:\n\"1\"\n,\n \n\"height\"\n:\n3\n,\n \n\"lenght\"\n:\n10\n,\n \n\"width\"\n:\n3\n,\n\"weight\"\n:\n4.0\n}]}\n\n\n\n# create a domain quote payload entity from the json data\n\n\n# this operation will also validate the data\n\n\nquote_payload\n \n=\n \nQuote\n.\ncreate\n(\nshipper\n=\nshipper\n,\n \nrecipient\n=\nrecipient\n,\n \nshipment_details\n=\nshipment_details\n)\n\n\n\n# get a carrier quote request xml object from the quote payload\n\n\nrequest\n \n=\n \nproxy\n.\nmapper\n.\ncreate_quote_request\n(\nquote_payload\n)\n\n\n\n# send a quote request to the carrier servers using the proxy\n\n\nresponse\n \n=\n \nproxy\n.\nget_quotes\n(\nrequest\n)\n\n\n\n# extract the domain quote entity from the carrier quote response\n\n\nquotes\n \n=\n \nproxy\n.\nmapper\n.\nparse_quote_response\n(\nresponse\n)\n\n\n\n\n\n\nprint\n(\njsonify\n(\nquotes\n))\n\n\n# -->\n\n\n'''\n\n\n[\n\n\n    [\n\n\n        {\n\n\n            \"base_charge\": 230.49,\n\n\n            \"carrier\": \"carrier\",\n\n\n            \"delivery_date\": null,\n\n\n            \"delivery_time\": null,\n\n\n            \"discount\": 0.0,\n\n\n            \"duties_and_taxes\": 0.0,\n\n\n            \"extra_charges\": [\n\n\n                {\n\n\n                    \"name\": \"FUEL\",\n\n\n                    \"value\": 9.22\n\n\n                }\n\n\n            ],\n\n\n            \"pickup_date\": null,\n\n\n            \"pickup_time\": null,\n\n\n            \"service_name\": \"INTERNATIONAL_PRIORITY\",\n\n\n            \"service_type\": \"PAYOR_ACCOUNT_SHIPMENT\",\n\n\n            \"total_charge\": 239.71\n\n\n        },\n\n\n        {\n\n\n            \"base_charge\": 207.47,\n\n\n            \"carrier\": \"carrier\",\n\n\n            \"delivery_date\": null,\n\n\n            \"delivery_time\": null,\n\n\n            \"discount\": 0.0,\n\n\n            \"duties_and_taxes\": 0.0,\n\n\n            \"extra_charges\": [\n\n\n                {\n\n\n                    \"name\": \"FUEL\",\n\n\n                    \"value\": 8.3\n\n\n                }\n\n\n            ],\n\n\n            \"pickup_date\": null,\n\n\n            \"pickup_time\": null,\n\n\n            \"service_name\": \"INTERNATIONAL_ECONOMY\",\n\n\n            \"service_type\": \"PAYOR_ACCOUNT_SHIPMENT\",\n\n\n            \"total_charge\": 215.77\n\n\n        }\n\n\n    ],\n\n\n    []\n\n\n]\n\n\n'''",
            "title": "Quote"
        },
        {
            "location": "/quote/#quotes-rate",
            "text": "Use a proxy, and it's mapper to get a carrier quote.  from   purplship.domain.entities   import   Quote  from   gds_helpers   import   jsonify  # JSON data  shipper   =   { \"address\" :   { \"postal_code\" : \"H3N1S4\" ,   \"country_code\" : \"CA\" }}  recipient   =   { \"address\" :   { \"city\" : \"Lome\" ,   \"country_code\" : \"TG\" }}  shipment_details   =   { \"packages\" :   [{ \"id\" : \"1\" ,   \"height\" : 3 ,   \"lenght\" : 10 ,   \"width\" : 3 , \"weight\" : 4.0 }]}  # create a domain quote payload entity from the json data  # this operation will also validate the data  quote_payload   =   Quote . create ( shipper = shipper ,   recipient = recipient ,   shipment_details = shipment_details )  # get a carrier quote request xml object from the quote payload  request   =   proxy . mapper . create_quote_request ( quote_payload )  # send a quote request to the carrier servers using the proxy  response   =   proxy . get_quotes ( request )  # extract the domain quote entity from the carrier quote response  quotes   =   proxy . mapper . parse_quote_response ( response )   print ( jsonify ( quotes ))  # -->  '''  [      [          {              \"base_charge\": 230.49,              \"carrier\": \"carrier\",              \"delivery_date\": null,              \"delivery_time\": null,              \"discount\": 0.0,              \"duties_and_taxes\": 0.0,              \"extra_charges\": [                  {                      \"name\": \"FUEL\",                      \"value\": 9.22                  }              ],              \"pickup_date\": null,              \"pickup_time\": null,              \"service_name\": \"INTERNATIONAL_PRIORITY\",              \"service_type\": \"PAYOR_ACCOUNT_SHIPMENT\",              \"total_charge\": 239.71          },          {              \"base_charge\": 207.47,              \"carrier\": \"carrier\",              \"delivery_date\": null,              \"delivery_time\": null,              \"discount\": 0.0,              \"duties_and_taxes\": 0.0,              \"extra_charges\": [                  {                      \"name\": \"FUEL\",                      \"value\": 8.3                  }              ],              \"pickup_date\": null,              \"pickup_time\": null,              \"service_name\": \"INTERNATIONAL_ECONOMY\",              \"service_type\": \"PAYOR_ACCOUNT_SHIPMENT\",              \"total_charge\": 215.77          }      ],      []  ]  '''",
            "title": "Quotes (Rate)"
        },
        {
            "location": "/tracking/",
            "text": "Tracking\n\n\nUse a proxy, and it's mapper get trackings.\n\n\nfrom\n \npurplship.domain.entities\n \nimport\n \nTracking\n\n\n\n# JSON data\n\n\ntracking_numbers\n \n=\n \n[\n\"7740842550\"\n,\n \n\"1815115363\"\n]\n\n\n\n# create a domain tracking payload entity from the json data\n\n\n# this operation will also validate the data\n\n\ntracking_payload\n \n=\n \nTracking\n.\ncreate\n(\ntracking_numbers\n=\ntracking_numbers\n)\n\n\n\n# get a carrier tracking request xml object from the tracking payload\n\n\ntracking_request\n \n=\n \nproxy\n.\nmapper\n.\ncreate_tracking_request\n(\ntracking_payload\n)\n\n\n\n# send a tracking request to the carrier servers using the proxy\n\n\nresponse\n \n=\n \nproxy\n.\nget_trackings\n(\ntracking_request\n)\n\n\n\n# extract the domain tracking entity from the carrier tracking response\n\n\ntrackings\n \n=\n \nproxy\n.\nmapper\n.\nparse_tracking_response\n(\nresponse\n)\n\n\n\n\n\n\nprint\n(\njsonify\n(\ntrackings\n))\n\n\n# -->\n\n\n'''\n\n\n[\n\n\n    [\n\n\n        {\n\n\n            \"carrier\": \"carrier_name\",\n\n\n            \"events\": [\n\n\n                {\n\n\n                    \"code\": \"PU\",\n\n\n                    \"date\": \"2009-08-26\",\n\n\n                    \"description\": \"Shipment picked up\",\n\n\n                    \"location\": \"Singapore - Singapore \",\n\n\n                    \"signatory\": \"\",\n\n\n                    \"time\": \"10:00:00\"\n\n\n                }\n\n\n            ],\n\n\n            \"shipment_date\": \"2009-08-26 10:00:00\",\n\n\n            \"tracking_number\": \"7740842550\"\n\n\n        },\n\n\n        {\n\n\n            \"carrier\": \"carrier_name\",\n\n\n            \"events\": [\n\n\n                {\n\n\n                    \"code\": \"PU\",\n\n\n                    \"date\": \"2009-08-13\",\n\n\n                    \"description\": \"Shipment picked up\",\n\n\n                    \"location\": \"Hong Kong - Hong Kong \",\n\n\n                    \"signatory\": \"\",\n\n\n                    \"time\": \"23:58:00\"\n\n\n                },\n\n\n                {\n\n\n                    \"code\": \"RW\",\n\n\n                    \"date\": \"2009-08-14\",\n\n\n                    \"description\": \"\",\n\n\n                    \"location\": \"Hong Kong - Hong Kong \",\n\n\n                    \"signatory\": \"21.20\",\n\n\n                    \"time\": \"02:19:50\"\n\n\n                }\n\n\n            ],\n\n\n            \"shipment_date\": \"2009-08-13 23:58:00\",\n\n\n            \"tracking_number\": \"1815115363\"\n\n\n        }\n\n\n    ],\n\n\n    []\n\n\n]\n\n\n'''",
            "title": "Tracking"
        },
        {
            "location": "/tracking/#tracking",
            "text": "Use a proxy, and it's mapper get trackings.  from   purplship.domain.entities   import   Tracking  # JSON data  tracking_numbers   =   [ \"7740842550\" ,   \"1815115363\" ]  # create a domain tracking payload entity from the json data  # this operation will also validate the data  tracking_payload   =   Tracking . create ( tracking_numbers = tracking_numbers )  # get a carrier tracking request xml object from the tracking payload  tracking_request   =   proxy . mapper . create_tracking_request ( tracking_payload )  # send a tracking request to the carrier servers using the proxy  response   =   proxy . get_trackings ( tracking_request )  # extract the domain tracking entity from the carrier tracking response  trackings   =   proxy . mapper . parse_tracking_response ( response )   print ( jsonify ( trackings ))  # -->  '''  [      [          {              \"carrier\": \"carrier_name\",              \"events\": [                  {                      \"code\": \"PU\",                      \"date\": \"2009-08-26\",                      \"description\": \"Shipment picked up\",                      \"location\": \"Singapore - Singapore \",                      \"signatory\": \"\",                      \"time\": \"10:00:00\"                  }              ],              \"shipment_date\": \"2009-08-26 10:00:00\",              \"tracking_number\": \"7740842550\"          },          {              \"carrier\": \"carrier_name\",              \"events\": [                  {                      \"code\": \"PU\",                      \"date\": \"2009-08-13\",                      \"description\": \"Shipment picked up\",                      \"location\": \"Hong Kong - Hong Kong \",                      \"signatory\": \"\",                      \"time\": \"23:58:00\"                  },                  {                      \"code\": \"RW\",                      \"date\": \"2009-08-14\",                      \"description\": \"\",                      \"location\": \"Hong Kong - Hong Kong \",                      \"signatory\": \"21.20\",                      \"time\": \"02:19:50\"                  }              ],              \"shipment_date\": \"2009-08-13 23:58:00\",              \"tracking_number\": \"1815115363\"          }      ],      []  ]  '''",
            "title": "Tracking"
        },
        {
            "location": "/shipping/",
            "text": "Shipping\n\n\nUse a proxy and, it's mapper to create a shipment.\n\n\nfrom\n \npurplship.domain.entities\n \nimport\n \nShipment\n\n\n\n# JSON data\n\n\nshipper\n \n=\n \n{\n\n    \n\"company_name\"\n:\n \n\"shipper company privated limited 12\"\n,\n\n    \n\"address_lines\"\n:\n \n[\n\"238 850925434 Drive\"\n],\n\n    \n\"city\"\n:\n \n\"Scottsdale\"\n,\n\n    \n\"postal_code\"\n:\n \n\"85260\"\n,\n\n    \n\"country_code\"\n:\n \n\"US\"\n,\n\n    \n\"country_name\"\n:\n \n\"United States of America\"\n,\n\n    \n\"person_name\"\n:\n \n\"Ms Lucian\"\n,\n\n    \n\"phone_number\"\n:\n \n\"1 23 8613402\"\n,\n\n    \n\"email_address\"\n:\n \n\"test@email.com\"\n,\n\n    \n\"region\"\n:\n \n\"Arizona\"\n,\n\n    \n\"region_code\"\n:\n \n\"AZ\"\n,\n\n    \n\"extra\"\n:\n \n{\n\n        \n\"ShipperID\"\n:\n \n\"123456789\"\n,\n\n        \n\"RegisteredAccount\"\n:\n \n\"123456789\"\n,\n\n        \n\"PhoneExtension\"\n:\n \n\"3403\"\n,\n\n        \n\"FaxNumber\"\n:\n \n\"1 905 8613411\"\n,\n\n        \n\"Telex\"\n:\n \n\"1245\"\n\n    \n}\n\n\n}\n\n\nrecipient\n \n=\n \n{\n\n    \n\"company_name\"\n:\n \n\"IBM Bruse Pte Ltd\"\n,\n\n    \n\"address_lines\"\n:\n \n[\n\"9 Business Park Central 1\"\n,\n \n\"3th Floor\"\n,\n \n\"The IBM Place\"\n],\n\n    \n\"city\"\n:\n \n\"Brussels\"\n,\n\n    \n\"postal_code\"\n:\n \n\"1060\"\n,\n\n    \n\"country_code\"\n:\n \n\"BE\"\n,\n\n    \n\"country_name\"\n:\n \n\"Belgium\"\n,\n\n    \n\"person_name\"\n:\n \n\"Mrs Orlander\"\n,\n\n    \n\"phone_number\"\n:\n \n\"506-851-2271\"\n,\n\n    \n\"email_address\"\n:\n \n\"c_orlander@gc.ca\"\n,\n\n    \n\"extra\"\n:\n \n{\n\n        \n\"PhoneExtension\"\n:\n \n\"7862\"\n,\n\n        \n\"FaxNumber\"\n:\n \n\"506-851-7403\"\n,\n\n        \n\"Telex\"\n:\n \n\"506-851-7121\"\n\n    \n}\n\n\n}\n\n\nshipment\n \n=\n \n{\n\n    \n\"packages\"\n:\n \n[{\n\"id\"\n:\n \n\"1\"\n,\n \n\"height\"\n:\n \n3\n,\n \n\"length\"\n:\n \n10\n,\n \n\"width\"\n:\n \n3\n,\n \n\"weight\"\n:\n \n4.0\n,\n \n\"packaging_type\"\n:\n \n\"EE\"\n}],\n\n    \n\"is_document\"\n:\n \nFalse\n,\n\n    \n\"shipper_account_number\"\n:\n \n\"123456789\"\n,\n\n    \n\"paid_by\"\n:\n \n\"S\"\n,\n\n    \n\"payment_account_number\"\n:\n \n\"123456789\"\n,\n\n    \n\"duty_paid_by\"\n:\n \n\"S\"\n,\n\n    \n\"duty_payment_account\"\n:\n \n\"123456789\"\n,\n\n    \n\"declared_value\"\n:\n \n200.00\n,\n\n    \n\"label\"\n:\n \n{\n\"type\"\n:\n \n\"CIN\"\n,\n \n\"format\"\n:\n \n\"PDF\"\n,\n \n\"extra\"\n:\n \n{\n\"Image\"\n:\n \nb\n\"SUkqAAgA\"\n}},\n\n    \n\"services\"\n:\n \n[\n\"WY\"\n],\n\n    \n\"commodities\"\n:\n \n[{\n\"code\"\n:\n \n\"cc\"\n,\n \n\"description\"\n:\n \n\"cn\"\n}],\n\n    \n\"extra\"\n:\n \n{\n\"EProcShip\"\n:\n \n\"N\"\n,\n \n\"GlobalProductCode\"\n:\n \n\"P\"\n,\n \n\"LocalProductCode\"\n:\n \n\"P\"\n},\n\n    \n\"customs\"\n:\n \n{\n\n        \n\"terms_of_trade\"\n:\n \n\"DAP\"\n,\n\n        \n\"extra\"\n:\n \n{\n\n            \n\"ScheduleB\"\n:\n \n\"3002905110\"\n,\n\n            \n\"ExportLicense\"\n:\n \n\"D123456\"\n,\n\n            \n\"ShipperEIN\"\n:\n \n\"112233445566\"\n,\n\n            \n\"ShipperIDType\"\n:\n \n\"S\"\n,\n\n            \n\"ImportLicense\"\n:\n \n\"ImportLic\"\n,\n\n            \n\"ConsigneeEIN\"\n:\n \n\"ConEIN2123\"\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n# create a domain shipping payload entity from the json data\n\n\n# this operation will also validate the data\n\n\nshipping_payload\n \n=\n \nShipment\n.\ncreate\n(\nshipper\n=\nshipper\n,\n \nrecipient\n=\nrecipient\n,\n \nshipment\n=\nshipment\n)\n\n\n\n# get a carrier shipping request xml object from the quote payload\n\n\nshipping_request\n \n=\n \nproxy\n.\nmapper\n.\ncreate_shipment_request\n(\nshipping_payload\n)\n\n\n\n# send a shipping request to the carrier servers using the proxy\n\n\nresponse\n \n=\n \nproxy\n.\ncreate_shipping\n(\nshipping_request\n)\n\n\n\n# extract the domain shipping entity from the carrier shipping response\n\n\nshipping\n \n=\n \nproxy\n.\nmapper\n.\nparse_shipping_response\n(\nresponse\n)\n\n\n\n\n\n\nprint\n(\njsonify\n(\nshipping\n))\n\n\n# -->\n\n\n'''\n\n\n[\n\n\n    {\n\n\n        'carrier': 'carrier_name',\n\n\n        'documents': [\n\n\n            'iVBORw0KGgoAAAANSUhEUgAAAYwAAABeAQMAAAAKdrGZAAAABlBMVEX///8AAABVwtN+AAAAaklEQVR42mNkYGBIyL8w5a9P7YJXKU8ZgkU2V81cNmWt5IIokaMMX40+N6zsivI+93bZRDMx13vzlRYwMDAxkAxGtYxqGdUyqmVUy6iWUS2jWka1jGoZ1TKqZVTLqJZRLaNaRrWMaiEVAAB3uBe8nSip8QAAAABJRU5ErkJggg==',\n\n\n            'iVBORw0KGgoAAAANSUhEUgAAAZYAAABeAQMAAAA6+qC4AAAABlBMVEX///8AAABVwtN+AAAAZ0lEQVR42u3LIRJAUBRA0Ufwk6IY0eqMLBnBS/yi6Gb8XdiBPRBoZE1iDZpwTz+eiJRhNey2qNNZjUZnMMaLmzVR6W5TNfGaNe46Wp3kybfeivjyHYfD4XA4HA6Hw+FwOBwOh/On8wLTGBe8mbtkhgAAAABJRU5ErkJggg==',\n\n\n            'iVBORw0KGgoAAAANSUhEUgAAAYwAAABeAQMAAAAKdrGZAAAABlBMVEX///8AAABVwtN+AAAAaklEQVR42mNkYGBIyL8w5a9P7YJXKU8ZgkU2V81cNmWt5IIokaMMX40+N6zsivI+93bZRDMx13vzlRYwMDAxkAxGtYxqGdUyqmVUy6iWUS2jWka1jGoZ1TKqZVTLqJZRLaNaRrWMaiEVAAB3uBe8nSip8QAAAABJRU5ErkJggg==',\n\n\n            'iVBORw0KGgoAAAANSUhEUgAAATUAAABeAQMAAAB4lRFqAAAABlBMVEX///8AAABVwtN+AAAAVklEQVR42mNkYGBIyL8whdvO9d6UK0e/3puyeZrrvfkaYnOvlzGm6v4Sjsq/MPECAwMTA3FgVN2oulF1o+pG1Y2qG1U3qm5U3ai6UXWj6kbVjaqjhjoAdiwSvEkaxBcAAAAASUVORK5CYII=',\n\n\n            'iVBORw0KGgoAAAANSUhEUgAAARgAAAAkAQMAAABoj7etAAAABlBMVEX///8AAABVwtN+AAAAPElEQVR42mNkYGBIyL8wZcutGwyvUp4yBMtriM295XDlxCm29MRU31ufpRgYmBgIg1E1o2pG1YyqGepqAKFJD0hDGoJfAAAAAElFTkSuQmCC',\n\n\n            'iVBORw0KGgoAAAANSUhEUgAAAawAAABeAQMAAABFK7JJAAAABlBMVEX///8AAABVwtN+AAAAaUlEQVR42u3LoRVAUACG0Z/gKLKjOK+YhRlMIOko7xUDSBqSUQyhaFYgsYMkfLdfT1ITdUdcL+PtNpuEqYrJJjZ3g06XXZ7Rs1cKZil2TV+ubW4kX5/QaDQajUaj0Wg0Go1Go9FotH+3F1GxE7xDV+SvAAAAAElFTkSuQmCC'\n\n\n        ],\n\n\n        'reference': {\n\n\n            'type': 'St',\n\n\n            'value': 'reference'\n\n\n        },\n\n\n        'service': 'EXPRESS WORLDWIDE',\n\n\n        'shipment_date': '2017-11-10',\n\n\n        'total_charge': {\n\n\n            'amount': '155.160',\n\n\n            'currency': 'USD',\n\n\n            'name': 'Shipment charge'\n\n\n        },\n\n\n        'tracking_number': '0044650491'\n\n\n    },\n\n\n    []\n\n\n]\n\n\n'''",
            "title": "Shipping"
        },
        {
            "location": "/shipping/#shipping",
            "text": "Use a proxy and, it's mapper to create a shipment.  from   purplship.domain.entities   import   Shipment  # JSON data  shipper   =   { \n     \"company_name\" :   \"shipper company privated limited 12\" , \n     \"address_lines\" :   [ \"238 850925434 Drive\" ], \n     \"city\" :   \"Scottsdale\" , \n     \"postal_code\" :   \"85260\" , \n     \"country_code\" :   \"US\" , \n     \"country_name\" :   \"United States of America\" , \n     \"person_name\" :   \"Ms Lucian\" , \n     \"phone_number\" :   \"1 23 8613402\" , \n     \"email_address\" :   \"test@email.com\" , \n     \"region\" :   \"Arizona\" , \n     \"region_code\" :   \"AZ\" , \n     \"extra\" :   { \n         \"ShipperID\" :   \"123456789\" , \n         \"RegisteredAccount\" :   \"123456789\" , \n         \"PhoneExtension\" :   \"3403\" , \n         \"FaxNumber\" :   \"1 905 8613411\" , \n         \"Telex\" :   \"1245\" \n     }  }  recipient   =   { \n     \"company_name\" :   \"IBM Bruse Pte Ltd\" , \n     \"address_lines\" :   [ \"9 Business Park Central 1\" ,   \"3th Floor\" ,   \"The IBM Place\" ], \n     \"city\" :   \"Brussels\" , \n     \"postal_code\" :   \"1060\" , \n     \"country_code\" :   \"BE\" , \n     \"country_name\" :   \"Belgium\" , \n     \"person_name\" :   \"Mrs Orlander\" , \n     \"phone_number\" :   \"506-851-2271\" , \n     \"email_address\" :   \"c_orlander@gc.ca\" , \n     \"extra\" :   { \n         \"PhoneExtension\" :   \"7862\" , \n         \"FaxNumber\" :   \"506-851-7403\" , \n         \"Telex\" :   \"506-851-7121\" \n     }  }  shipment   =   { \n     \"packages\" :   [{ \"id\" :   \"1\" ,   \"height\" :   3 ,   \"length\" :   10 ,   \"width\" :   3 ,   \"weight\" :   4.0 ,   \"packaging_type\" :   \"EE\" }], \n     \"is_document\" :   False , \n     \"shipper_account_number\" :   \"123456789\" , \n     \"paid_by\" :   \"S\" , \n     \"payment_account_number\" :   \"123456789\" , \n     \"duty_paid_by\" :   \"S\" , \n     \"duty_payment_account\" :   \"123456789\" , \n     \"declared_value\" :   200.00 , \n     \"label\" :   { \"type\" :   \"CIN\" ,   \"format\" :   \"PDF\" ,   \"extra\" :   { \"Image\" :   b \"SUkqAAgA\" }}, \n     \"services\" :   [ \"WY\" ], \n     \"commodities\" :   [{ \"code\" :   \"cc\" ,   \"description\" :   \"cn\" }], \n     \"extra\" :   { \"EProcShip\" :   \"N\" ,   \"GlobalProductCode\" :   \"P\" ,   \"LocalProductCode\" :   \"P\" }, \n     \"customs\" :   { \n         \"terms_of_trade\" :   \"DAP\" , \n         \"extra\" :   { \n             \"ScheduleB\" :   \"3002905110\" , \n             \"ExportLicense\" :   \"D123456\" , \n             \"ShipperEIN\" :   \"112233445566\" , \n             \"ShipperIDType\" :   \"S\" , \n             \"ImportLicense\" :   \"ImportLic\" , \n             \"ConsigneeEIN\" :   \"ConEIN2123\" \n         } \n     }  }  # create a domain shipping payload entity from the json data  # this operation will also validate the data  shipping_payload   =   Shipment . create ( shipper = shipper ,   recipient = recipient ,   shipment = shipment )  # get a carrier shipping request xml object from the quote payload  shipping_request   =   proxy . mapper . create_shipment_request ( shipping_payload )  # send a shipping request to the carrier servers using the proxy  response   =   proxy . create_shipping ( shipping_request )  # extract the domain shipping entity from the carrier shipping response  shipping   =   proxy . mapper . parse_shipping_response ( response )   print ( jsonify ( shipping ))  # -->  '''  [      {          'carrier': 'carrier_name',          'documents': [              'iVBORw0KGgoAAAANSUhEUgAAAYwAAABeAQMAAAAKdrGZAAAABlBMVEX///8AAABVwtN+AAAAaklEQVR42mNkYGBIyL8w5a9P7YJXKU8ZgkU2V81cNmWt5IIokaMMX40+N6zsivI+93bZRDMx13vzlRYwMDAxkAxGtYxqGdUyqmVUy6iWUS2jWka1jGoZ1TKqZVTLqJZRLaNaRrWMaiEVAAB3uBe8nSip8QAAAABJRU5ErkJggg==',              'iVBORw0KGgoAAAANSUhEUgAAAZYAAABeAQMAAAA6+qC4AAAABlBMVEX///8AAABVwtN+AAAAZ0lEQVR42u3LIRJAUBRA0Ufwk6IY0eqMLBnBS/yi6Gb8XdiBPRBoZE1iDZpwTz+eiJRhNey2qNNZjUZnMMaLmzVR6W5TNfGaNe46Wp3kybfeivjyHYfD4XA4HA6Hw+FwOBwOh/On8wLTGBe8mbtkhgAAAABJRU5ErkJggg==',              'iVBORw0KGgoAAAANSUhEUgAAAYwAAABeAQMAAAAKdrGZAAAABlBMVEX///8AAABVwtN+AAAAaklEQVR42mNkYGBIyL8w5a9P7YJXKU8ZgkU2V81cNmWt5IIokaMMX40+N6zsivI+93bZRDMx13vzlRYwMDAxkAxGtYxqGdUyqmVUy6iWUS2jWka1jGoZ1TKqZVTLqJZRLaNaRrWMaiEVAAB3uBe8nSip8QAAAABJRU5ErkJggg==',              'iVBORw0KGgoAAAANSUhEUgAAATUAAABeAQMAAAB4lRFqAAAABlBMVEX///8AAABVwtN+AAAAVklEQVR42mNkYGBIyL8whdvO9d6UK0e/3puyeZrrvfkaYnOvlzGm6v4Sjsq/MPECAwMTA3FgVN2oulF1o+pG1Y2qG1U3qm5U3ai6UXWj6kbVjaqjhjoAdiwSvEkaxBcAAAAASUVORK5CYII=',              'iVBORw0KGgoAAAANSUhEUgAAARgAAAAkAQMAAABoj7etAAAABlBMVEX///8AAABVwtN+AAAAPElEQVR42mNkYGBIyL8wZcutGwyvUp4yBMtriM295XDlxCm29MRU31ufpRgYmBgIg1E1o2pG1YyqGepqAKFJD0hDGoJfAAAAAElFTkSuQmCC',              'iVBORw0KGgoAAAANSUhEUgAAAawAAABeAQMAAABFK7JJAAAABlBMVEX///8AAABVwtN+AAAAaUlEQVR42u3LoRVAUACG0Z/gKLKjOK+YhRlMIOko7xUDSBqSUQyhaFYgsYMkfLdfT1ITdUdcL+PtNpuEqYrJJjZ3g06XXZ7Rs1cKZil2TV+ubW4kX5/QaDQajUaj0Wg0Go1Go9FotH+3F1GxE7xDV+SvAAAAAElFTkSuQmCC'          ],          'reference': {              'type': 'St',              'value': 'reference'          },          'service': 'EXPRESS WORLDWIDE',          'shipment_date': '2017-11-10',          'total_charge': {              'amount': '155.160',              'currency': 'USD',              'name': 'Shipment charge'          },          'tracking_number': '0044650491'      },      []  ]  '''",
            "title": "Shipping"
        },
        {
            "location": "/pickup/",
            "text": "Pickup\n\n\nPickup booking\n\n\nUse a proxy, and it's mapper to book a pickup.\n\n\nfrom\n \npurplship.domain.entities\n \nimport\n \nPickup\n\n\n\n# JSON data\n\n\ndata\n \n=\n \n{\n\n    \n\"date\"\n:\n \n\"2013-10-19\"\n,\n\n    \n\"account_number\"\n:\n \n\"123456789\"\n,\n\n    \n\"pieces\"\n:\n \n2\n,\n\n    \n\"weight\"\n:\n \n20\n,\n\n    \n\"weight_unit\"\n:\n \n\"L\"\n,\n\n    \n\"ready_time\"\n:\n \n\"10:20:00\"\n,\n\n    \n\"closing_time\"\n:\n \n\"09:20:00\"\n,\n\n    \n\"city\"\n:\n \n\"Montreal\"\n,\n\n    \n\"postal_code\"\n:\n \n\"H8Z2Z3\"\n,\n\n    \n\"person_name\"\n:\n \n\"Subhayu\"\n,\n\n    \n\"phone_number\"\n:\n \n\"4801313131\"\n,\n\n    \n\"region_code\"\n:\n \n\"QC\"\n,\n\n    \n\"country_code\"\n:\n \n\"CA\"\n,\n\n    \n\"email_address\"\n:\n \n\"test@mail.com\"\n,\n\n    \n\"instruction\"\n:\n \n\"behind the front desk\"\n,\n\n    \n\"address_lines\"\n:\n \n[\n\"234 rue Hubert\"\n],\n\n    \n\"extra\"\n:\n \n{\n\n        \n\"RequestorContact\"\n:\n \n{\n \n\"PersonName\"\n:\n \n\"Rikhil\"\n,\n \n\"Phone\"\n:\n \n\"23162\"\n \n}\n\n    \n}\n\n\n}\n\n\n\n# create a domain pickup payload entity from the json data\n\n\n# this operation will also validate the data\n\n\npickup_payload\n \n=\n \nPickup\n.\ncreate\n(\n**\ndata\n)\n\n\n\n# get a carrier pickup request xml object from the pickup payload\n\n\npickup_request\n \n=\n \nproxy\n.\nmapper\n.\ncreate_pickup_request\n(\npickup_payload\n)\n\n\n\n# send a pickup request to the carrier servers using the proxy\n\n\nresponse\n \n=\n \nproxy\n.\nrequest_pickup\n(\npickup_request\n)\n\n\n\n# extract the domain pickup entity from the carrier pickup response\n\n\npickup_response\n \n=\n \nproxy\n.\nmapper\n.\nparse_pickup_response\n(\nresponse\n)\n\n\n\n\n\n\nprint\n(\njsonify\n(\npickup_response\n))\n\n\n# -->\n\n\n'''\n\n\n[\n\n\n    {\n\n\n        'carrier': 'carrier_name',\n\n\n        'confirmation_number': '3674',\n\n\n        'pickup_charge': None,\n\n\n        'pickup_date': '2013-10-09',\n\n\n        'ref_times': [\n\n\n            {\n\n\n                'name': 'ReadyByTime', 'value': '10:30'\n\n\n            },\n\n\n            {\n\n\n                'name': 'CallInTime', 'value': '08:30'\n\n\n            }\n\n\n        ]\n\n\n    },\n\n\n    []\n\n\n]\n\n\n'''",
            "title": "Pickup"
        },
        {
            "location": "/pickup/#pickup",
            "text": "",
            "title": "Pickup"
        },
        {
            "location": "/pickup/#pickup-booking",
            "text": "Use a proxy, and it's mapper to book a pickup.  from   purplship.domain.entities   import   Pickup  # JSON data  data   =   { \n     \"date\" :   \"2013-10-19\" , \n     \"account_number\" :   \"123456789\" , \n     \"pieces\" :   2 , \n     \"weight\" :   20 , \n     \"weight_unit\" :   \"L\" , \n     \"ready_time\" :   \"10:20:00\" , \n     \"closing_time\" :   \"09:20:00\" , \n     \"city\" :   \"Montreal\" , \n     \"postal_code\" :   \"H8Z2Z3\" , \n     \"person_name\" :   \"Subhayu\" , \n     \"phone_number\" :   \"4801313131\" , \n     \"region_code\" :   \"QC\" , \n     \"country_code\" :   \"CA\" , \n     \"email_address\" :   \"test@mail.com\" , \n     \"instruction\" :   \"behind the front desk\" , \n     \"address_lines\" :   [ \"234 rue Hubert\" ], \n     \"extra\" :   { \n         \"RequestorContact\" :   {   \"PersonName\" :   \"Rikhil\" ,   \"Phone\" :   \"23162\"   } \n     }  }  # create a domain pickup payload entity from the json data  # this operation will also validate the data  pickup_payload   =   Pickup . create ( ** data )  # get a carrier pickup request xml object from the pickup payload  pickup_request   =   proxy . mapper . create_pickup_request ( pickup_payload )  # send a pickup request to the carrier servers using the proxy  response   =   proxy . request_pickup ( pickup_request )  # extract the domain pickup entity from the carrier pickup response  pickup_response   =   proxy . mapper . parse_pickup_response ( response )   print ( jsonify ( pickup_response ))  # -->  '''  [      {          'carrier': 'carrier_name',          'confirmation_number': '3674',          'pickup_charge': None,          'pickup_date': '2013-10-09',          'ref_times': [              {                  'name': 'ReadyByTime', 'value': '10:30'              },              {                  'name': 'CallInTime', 'value': '08:30'              }          ]      },      []  ]  '''",
            "title": "Pickup booking"
        },
        {
            "location": "/roadmap/",
            "text": "Roadmap\n\n\nMappers integration\n\n\nProgress\n\n\n\n\nNOTE: PurplShip is not limited to the carriers listed here. The abstraction provided by PurplShip\nis validated by the integration of these carrier APIs.\n\n\nTherefore if the carrier API you did like to integrate is not listed here, the PurplShip abstraction\ncan still get you quickly started.\n\n\n\n\n\n\n\n\n\n\nCarrier\n\n\nQuote\n\n\nTracking\n\n\nShipping\n\n\nPickup\n\n\nAddress Validation\n\n\n\n\n\n\n\n\n\n\nFedEx\n\n\nI (90%)\n\n\nI (90%)\n\n\nI (30%)\n\n\nI (30%)\n\n\nN\n\n\n\n\n\n\nDHL\n\n\nI (90%)\n\n\nI (90%)\n\n\nI (90%)\n\n\nI (30%)\n\n\nN\n\n\n\n\n\n\nUPS\n\n\nI (90%)\n\n\nI (90%)\n\n\nI (30%)\n\n\nI (30%)\n\n\nN\n\n\n\n\n\n\nCanada Post\n\n\nI (90%)\n\n\nI (90%)\n\n\nI (30%)\n\n\nI (30%)\n\n\nN\n\n\n\n\n\n\nUSPS\n\n\nN\n\n\nN\n\n\nN\n\n\nN\n\n\nN\n\n\n\n\n\n\nTNT\n\n\nN\n\n\nN\n\n\nN\n\n\nN\n\n\nN\n\n\n\n\n\n\n\n\nLegend\n\n\n\n\nI : Implemented\n\n\nN : Not Implemented\n\n\n\n\nTasks\n\n\n\n\nDecouple mapper interface implementation from carrier specific request\n\n\n\n\n\n\nextracting carrier entity instantiation from mapper methods will offer a clean way to integrate\ndifferent 'sub' requests\n\n\neg:\nUnder DHL tracking request a KnownTrackingRequest or UnknownTrackingRequest can be instantiated\nif we know the tracking numbers or are retrieving shipment from references and shipment details\n\n\n\n\nfrom\n \npurplship.domain.entities\n \nimport\n \nquote_request\n\n\nfrom\n \npydhl.tracking_request_known\n \nimport\n \nKnownTrackingRequest\n\n\nfrom\n \npydhl.tracking_request_unknown\n \nimport\n \nUnknownTrackingRequest\n\n\n\ndef\n \ncreate_quote_request\n(\nself\n,\n \npayload\n:\n \nquote_request\n)\n \n->\n \nGeneric\n[\nKnownTrackingRequest\n,\n \nUnknownTrackingRequest\n]:\n\n    \nif\n \nis_freight_rate\n():\n\n        \nreturn\n \ncreate_known_tracking_request\n(\npayload\n)\n\n    \nreturn\n \ncreate_unknown_tracking_request\n(\npayload\n)\n\n\n\n\n\n\n\n\n\n\nWrite quick starter for contributors\n\n\n\n\nAdd dev-requirements.txt for pip install\n\n\n\n\n\n\n\n\nPublish PurplShip on pypi\n\n\n\n\nSolve the possibility to publish purplship and keep dependencies packages on GitHub so that\n\n\nshell\n   pip install --process-dependencies purplship\n\n\ninstalls purplship with dependencies like pydhl, pyups... from Github\n\n\n\n\n\n\n\n\nSet up project documentation for multi-version support\n\n\n\n\nPrepare the documentation website for the possibility of loading different released version after breaking changes\n\n\n\n\n\n\n\n\nImplement Gateway API level\n\n\n\n\n\n\nfrom\n \npurplship.domain.entities\n \nimport\n \nQuote\n\n\nfrom\n \npurplship.gateway\n \nimport\n \nGateway\n        \n# This is not implemented yet\n\n\n\nfrom\n \npurplship.mappers.dhl\n \nimport\n \nDHLProxy\n,\n \nDHLClient\n\n\nfrom\n \npurplship.mappers.fedex\n \nimport\n \nFedexProxy\n,\n \nFedexClient\n\n\n\ngateway\n \n=\n \nGateway\n()\n \n# This is not implemented yet\n\n\n\ndhlProxy\n \n=\n \nDHLProxy\n(\nDHLClient\n(\n\n  \n\"server_url\"\n,\n\n  \n\"YOUR_DHL_SITE_ID\"\n,\n\n  \n\"YOUR_DHL_SITE_PASSWORD\"\n,\n\n  \n\"YOUR_DHL_ACCOUNT_NUMBER\"\n\n\n))\n\n\n\nfedexProxy\n \n=\n \nFedexProxy\n(\nFedexClient\n(\n\n  \n\"server_url\"\n,\n\n  \n\"YOUR_DHL_SITE_ID\"\n,\n\n  \n\"YOUR_DHL_SITE_PASSWORD\"\n,\n\n  \n\"YOUR_DHL_ACCOUNT_NUMBER\"\n\n\n))\n\n\n\n# This is not implemented yet\n\n\ngateway\n.\nregister_proxy\n(\ndhlProxy\n)\n\n\ngateway\n.\nregister_proxy\n(\nfedexProxy\n)\n\n\n\nshipper\n \n=\n \n{\n\"address\"\n:\n \n{\n\"postal_code\"\n:\n\"H3N1S4\"\n,\n \n\"country_code\"\n:\n\"CA\"\n}}\n\n\nrecipient\n \n=\n \n{\n\"address\"\n:\n \n{\n\"city\"\n:\n\"Lome\"\n,\n \n\"country_code\"\n:\n\"TG\"\n}}\n\n\nshipment_details\n \n=\n \n{\n\"packages\"\n:\n \n[{\n\"id\"\n:\n\"1\"\n,\n \n\"height\"\n:\n3\n,\n \n\"lenght\"\n:\n10\n,\n \n\"width\"\n:\n3\n,\n\"weight\"\n:\n4.0\n}]}\n\n\n\nquote_payload\n \n=\n \nQuote\n.\ncreate\n(\nshipper\n=\nshipper\n,\n \nrecipient\n=\nrecipient\n,\n \nshipment_details\n=\nshipment_details\n)\n\n\n\nquotes\n \n=\n \ngateway\n.\nget_quotes\n(\nquoteR\n)\n \n# This is not implemented yet\n\n\n\n\n\n\nfrom\n \ngds_helpers\n \nimport\n \njsonify\n\n\n\nprint\n(\njsonify\n(\nquotes\n))\n\n\n'''\n\n\n[\n\n\n    [\n\n\n        {\n\n\n            'base_charge': 195.32,\n\n\n            'carrier': 'DHL',\n\n\n            'currency': 'CAD',\n\n\n            'delivery_date': '2018-06-26 11:59:00',\n\n\n            'discount': 0,\n\n\n            'duties_and_taxes': 0,\n\n\n            'extra_charges': [\n\n\n                {\n\n\n                    'name': 'FUEL SURCHARGE',\n\n\n                    'amount': 12.7,\n\n\n                    'currency': None\n\n\n                }\n\n\n            ],\n\n\n            'pickup_date': '2018-06-21',\n\n\n            'pickup_time': 'PT17H30M',\n\n\n            'service_name': 'EXPRESS WORLDWIDE DOC',\n\n\n            'service_type': 'TD',\n\n\n            'total_charge': 208.02\n\n\n        },\n\n\n        {\n\n\n            'base_charge': 207.47,\n\n\n            'carrier': 'FedEx',\n\n\n            'currency': 'USD',\n\n\n            'delivery_date': None,\n\n\n            'discount': 0.0,\n\n\n            'duties_and_taxes': 0.0,\n\n\n            'extra_charges': [\n\n\n                {\n\n\n                    'name': 'FUEL',\n\n\n                    'amount': 8.3,\n\n\n                    'currency': None\n\n\n                }\n\n\n            ],\n\n\n            'pickup_date': None,\n\n\n            'pickup_time': None,\n\n\n            'service_name': 'INTERNATIONAL_ECONOMY',\n\n\n            'service_type': 'PAYOR_ACCOUNT_SHIPMENT',\n\n\n            'total_charge': 215.77\n\n\n        }\n\n\n    ],\n\n\n    []\n\n\n]\n\n\n'''\n\n\n\n\n\n\n\n\n\n\nWrite documentation\n\n\n\n\n\n\nDocument carrier clients properties\n\n\nGetting started with a single carrier\n\n\nGetting started with multiple carriers\n\n\n\n\n\n\n\n\n\n\nExamples: Use case\n\n\n\n\n\n\nTracking notification Slack app\n\n\nLightweight shipping REST API",
            "title": "Roadmap"
        },
        {
            "location": "/roadmap/#roadmap",
            "text": "",
            "title": "Roadmap"
        },
        {
            "location": "/roadmap/#mappers-integration",
            "text": "",
            "title": "Mappers integration"
        },
        {
            "location": "/roadmap/#progress",
            "text": "NOTE: PurplShip is not limited to the carriers listed here. The abstraction provided by PurplShip\nis validated by the integration of these carrier APIs.  Therefore if the carrier API you did like to integrate is not listed here, the PurplShip abstraction\ncan still get you quickly started.      Carrier  Quote  Tracking  Shipping  Pickup  Address Validation      FedEx  I (90%)  I (90%)  I (30%)  I (30%)  N    DHL  I (90%)  I (90%)  I (90%)  I (30%)  N    UPS  I (90%)  I (90%)  I (30%)  I (30%)  N    Canada Post  I (90%)  I (90%)  I (30%)  I (30%)  N    USPS  N  N  N  N  N    TNT  N  N  N  N  N",
            "title": "Progress"
        },
        {
            "location": "/roadmap/#legend",
            "text": "I : Implemented  N : Not Implemented",
            "title": "Legend"
        },
        {
            "location": "/roadmap/#tasks",
            "text": "Decouple mapper interface implementation from carrier specific request    extracting carrier entity instantiation from mapper methods will offer a clean way to integrate\ndifferent 'sub' requests  eg:\nUnder DHL tracking request a KnownTrackingRequest or UnknownTrackingRequest can be instantiated\nif we know the tracking numbers or are retrieving shipment from references and shipment details   from   purplship.domain.entities   import   quote_request  from   pydhl.tracking_request_known   import   KnownTrackingRequest  from   pydhl.tracking_request_unknown   import   UnknownTrackingRequest  def   create_quote_request ( self ,   payload :   quote_request )   ->   Generic [ KnownTrackingRequest ,   UnknownTrackingRequest ]: \n     if   is_freight_rate (): \n         return   create_known_tracking_request ( payload ) \n     return   create_unknown_tracking_request ( payload )     Write quick starter for contributors   Add dev-requirements.txt for pip install     Publish PurplShip on pypi   Solve the possibility to publish purplship and keep dependencies packages on GitHub so that  shell\n   pip install --process-dependencies purplship  installs purplship with dependencies like pydhl, pyups... from Github     Set up project documentation for multi-version support   Prepare the documentation website for the possibility of loading different released version after breaking changes     Implement Gateway API level    from   purplship.domain.entities   import   Quote  from   purplship.gateway   import   Gateway          # This is not implemented yet  from   purplship.mappers.dhl   import   DHLProxy ,   DHLClient  from   purplship.mappers.fedex   import   FedexProxy ,   FedexClient  gateway   =   Gateway ()   # This is not implemented yet  dhlProxy   =   DHLProxy ( DHLClient ( \n   \"server_url\" , \n   \"YOUR_DHL_SITE_ID\" , \n   \"YOUR_DHL_SITE_PASSWORD\" , \n   \"YOUR_DHL_ACCOUNT_NUMBER\"  ))  fedexProxy   =   FedexProxy ( FedexClient ( \n   \"server_url\" , \n   \"YOUR_DHL_SITE_ID\" , \n   \"YOUR_DHL_SITE_PASSWORD\" , \n   \"YOUR_DHL_ACCOUNT_NUMBER\"  ))  # This is not implemented yet  gateway . register_proxy ( dhlProxy )  gateway . register_proxy ( fedexProxy )  shipper   =   { \"address\" :   { \"postal_code\" : \"H3N1S4\" ,   \"country_code\" : \"CA\" }}  recipient   =   { \"address\" :   { \"city\" : \"Lome\" ,   \"country_code\" : \"TG\" }}  shipment_details   =   { \"packages\" :   [{ \"id\" : \"1\" ,   \"height\" : 3 ,   \"lenght\" : 10 ,   \"width\" : 3 , \"weight\" : 4.0 }]}  quote_payload   =   Quote . create ( shipper = shipper ,   recipient = recipient ,   shipment_details = shipment_details )  quotes   =   gateway . get_quotes ( quoteR )   # This is not implemented yet   from   gds_helpers   import   jsonify  print ( jsonify ( quotes ))  '''  [      [          {              'base_charge': 195.32,              'carrier': 'DHL',              'currency': 'CAD',              'delivery_date': '2018-06-26 11:59:00',              'discount': 0,              'duties_and_taxes': 0,              'extra_charges': [                  {                      'name': 'FUEL SURCHARGE',                      'amount': 12.7,                      'currency': None                  }              ],              'pickup_date': '2018-06-21',              'pickup_time': 'PT17H30M',              'service_name': 'EXPRESS WORLDWIDE DOC',              'service_type': 'TD',              'total_charge': 208.02          },          {              'base_charge': 207.47,              'carrier': 'FedEx',              'currency': 'USD',              'delivery_date': None,              'discount': 0.0,              'duties_and_taxes': 0.0,              'extra_charges': [                  {                      'name': 'FUEL',                      'amount': 8.3,                      'currency': None                  }              ],              'pickup_date': None,              'pickup_time': None,              'service_name': 'INTERNATIONAL_ECONOMY',              'service_type': 'PAYOR_ACCOUNT_SHIPMENT',              'total_charge': 215.77          }      ],      []  ]  '''     Write documentation    Document carrier clients properties  Getting started with a single carrier  Getting started with multiple carriers      Examples: Use case    Tracking notification Slack app  Lightweight shipping REST API",
            "title": "Tasks"
        },
        {
            "location": "/faq/",
            "text": "FAQ\n\n\nWhat is PurplShip solving?\n\n\nPurplShip offers an open source solution to integrate one or multiple shipping carriers API with ease.\n\n\nWho is PurplShip for?\n\n\nPurplShip is available as a library exposing tools to get the communication with\nshipping carriers directly from your codebase. Additionaly, the clean JSON in -> JSON out\narchitecture makes it easy to package it as a self contain REST API.\n\n\nWhat is the benefit of using PurplShip?\n\n\nPurplShip uses the power of open source to offer a strong base to tackle and reduce shipping API\nintegration challenges. Shipping carriers often have docs difficult to follow with omitted vital\ninformation, changing constantly. All these pain are relieved by the strong well-tested base\noffered by PurplShip.\n\n\nIs PurplShip easy to use?\n\n\nYes. PurplShip hides the complexity with dealing with SOAP and XML in favour of a higher level API\nexpressed in simple code.",
            "title": "FAQ"
        },
        {
            "location": "/faq/#faq",
            "text": "",
            "title": "FAQ"
        },
        {
            "location": "/faq/#what-is-purplship-solving",
            "text": "PurplShip offers an open source solution to integrate one or multiple shipping carriers API with ease.",
            "title": "What is PurplShip solving?"
        },
        {
            "location": "/faq/#who-is-purplship-for",
            "text": "PurplShip is available as a library exposing tools to get the communication with\nshipping carriers directly from your codebase. Additionaly, the clean JSON in -> JSON out\narchitecture makes it easy to package it as a self contain REST API.",
            "title": "Who is PurplShip for?"
        },
        {
            "location": "/faq/#what-is-the-benefit-of-using-purplship",
            "text": "PurplShip uses the power of open source to offer a strong base to tackle and reduce shipping API\nintegration challenges. Shipping carriers often have docs difficult to follow with omitted vital\ninformation, changing constantly. All these pain are relieved by the strong well-tested base\noffered by PurplShip.",
            "title": "What is the benefit of using PurplShip?"
        },
        {
            "location": "/faq/#is-purplship-easy-to-use",
            "text": "Yes. PurplShip hides the complexity with dealing with SOAP and XML in favour of a higher level API\nexpressed in simple code.",
            "title": "Is PurplShip easy to use?"
        },
        {
            "location": "/reference/",
            "text": "div.md-main__inner {\n    position: relative;\n    overflow: scroll;\n    min-height: 100vh;\n  }\n  iframe.api {\n    position: absolute;\n    top: 25px;\n    left: 5px;\n    right: 5px;\n    bottom: 0;\n    margin: 0;\n    padding: 0;\n    border: none;\n    width: 99%;\n    min-height: 600px;\n    margin-bottom: 5px !important;\n  }\n  @media only screen and (min-width: 76.1875em) {\n    iframe.api {\n      left: 24rem;\n    }\n  }\n  @media screen and (max-width: 600px) {\n    iframe.api {\n      display: none;\n    }\n  }\n\n\n\n\nOpen API in a new tab",
            "title": "Reference"
        }
    ]
}